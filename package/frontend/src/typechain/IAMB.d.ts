/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IAMBInterface extends ethers.utils.Interface {
  functions: {
    "destinationChainId()": FunctionFragment;
    "failedMessageDataHash(bytes32)": FunctionFragment;
    "failedMessageReceiver(bytes32)": FunctionFragment;
    "failedMessageSender(bytes32)": FunctionFragment;
    "maxGasPerTx()": FunctionFragment;
    "messageCallStatus(bytes32)": FunctionFragment;
    "messageId()": FunctionFragment;
    "messageSender()": FunctionFragment;
    "messageSourceChainId()": FunctionFragment;
    "requireToConfirmMessage(address,bytes,uint256)": FunctionFragment;
    "requireToPassMessage(address,bytes,uint256)": FunctionFragment;
    "sourceChainId()": FunctionFragment;
    "transactionHash()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "destinationChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "failedMessageDataHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "failedMessageReceiver",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "failedMessageSender",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxGasPerTx",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "messageCallStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "messageId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "messageSender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "messageSourceChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requireToConfirmMessage",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requireToPassMessage",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sourceChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transactionHash",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "destinationChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "failedMessageDataHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "failedMessageReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "failedMessageSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxGasPerTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageCallStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "messageId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "messageSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageSourceChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireToConfirmMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireToPassMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sourceChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionHash",
    data: BytesLike
  ): Result;

  events: {
    "AffirmationCompleted(address,address,bytes32,bool)": EventFragment;
    "RelayedMessage(address,address,bytes32,bool)": EventFragment;
    "UserRequestForAffirmation(bytes32,bytes)": EventFragment;
    "UserRequestForSignature(bytes32,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AffirmationCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayedMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserRequestForAffirmation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserRequestForSignature"): EventFragment;
}

export type AffirmationCompletedEvent = TypedEvent<
  [string, string, string, boolean] & {
    sender: string;
    executor: string;
    messageId: string;
    status: boolean;
  }
>;

export type RelayedMessageEvent = TypedEvent<
  [string, string, string, boolean] & {
    sender: string;
    executor: string;
    messageId: string;
    status: boolean;
  }
>;

export type UserRequestForAffirmationEvent = TypedEvent<
  [string, string] & { messageId: string; encodedData: string }
>;

export type UserRequestForSignatureEvent = TypedEvent<
  [string, string] & { messageId: string; encodedData: string }
>;

export class IAMB extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IAMBInterface;

  functions: {
    destinationChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    failedMessageDataHash(
      _messageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    failedMessageReceiver(
      _messageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    failedMessageSender(
      _messageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    maxGasPerTx(overrides?: CallOverrides): Promise<[BigNumber]>;

    messageCallStatus(
      _messageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    messageId(overrides?: CallOverrides): Promise<[string]>;

    messageSender(overrides?: CallOverrides): Promise<[string]>;

    messageSourceChainId(overrides?: CallOverrides): Promise<[string]>;

    requireToConfirmMessage(
      _contract: string,
      _data: BytesLike,
      _gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requireToPassMessage(
      _contract: string,
      _data: BytesLike,
      _gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sourceChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    transactionHash(overrides?: CallOverrides): Promise<[string]>;
  };

  destinationChainId(overrides?: CallOverrides): Promise<BigNumber>;

  failedMessageDataHash(
    _messageId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  failedMessageReceiver(
    _messageId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  failedMessageSender(
    _messageId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  maxGasPerTx(overrides?: CallOverrides): Promise<BigNumber>;

  messageCallStatus(
    _messageId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  messageId(overrides?: CallOverrides): Promise<string>;

  messageSender(overrides?: CallOverrides): Promise<string>;

  messageSourceChainId(overrides?: CallOverrides): Promise<string>;

  requireToConfirmMessage(
    _contract: string,
    _data: BytesLike,
    _gas: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requireToPassMessage(
    _contract: string,
    _data: BytesLike,
    _gas: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sourceChainId(overrides?: CallOverrides): Promise<BigNumber>;

  transactionHash(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    destinationChainId(overrides?: CallOverrides): Promise<BigNumber>;

    failedMessageDataHash(
      _messageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    failedMessageReceiver(
      _messageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    failedMessageSender(
      _messageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    maxGasPerTx(overrides?: CallOverrides): Promise<BigNumber>;

    messageCallStatus(
      _messageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    messageId(overrides?: CallOverrides): Promise<string>;

    messageSender(overrides?: CallOverrides): Promise<string>;

    messageSourceChainId(overrides?: CallOverrides): Promise<string>;

    requireToConfirmMessage(
      _contract: string,
      _data: BytesLike,
      _gas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    requireToPassMessage(
      _contract: string,
      _data: BytesLike,
      _gas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    sourceChainId(overrides?: CallOverrides): Promise<BigNumber>;

    transactionHash(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AffirmationCompleted(address,address,bytes32,bool)"(
      sender?: string | null,
      executor?: string | null,
      messageId?: BytesLike | null,
      status?: null
    ): TypedEventFilter<
      [string, string, string, boolean],
      { sender: string; executor: string; messageId: string; status: boolean }
    >;

    AffirmationCompleted(
      sender?: string | null,
      executor?: string | null,
      messageId?: BytesLike | null,
      status?: null
    ): TypedEventFilter<
      [string, string, string, boolean],
      { sender: string; executor: string; messageId: string; status: boolean }
    >;

    "RelayedMessage(address,address,bytes32,bool)"(
      sender?: string | null,
      executor?: string | null,
      messageId?: BytesLike | null,
      status?: null
    ): TypedEventFilter<
      [string, string, string, boolean],
      { sender: string; executor: string; messageId: string; status: boolean }
    >;

    RelayedMessage(
      sender?: string | null,
      executor?: string | null,
      messageId?: BytesLike | null,
      status?: null
    ): TypedEventFilter<
      [string, string, string, boolean],
      { sender: string; executor: string; messageId: string; status: boolean }
    >;

    "UserRequestForAffirmation(bytes32,bytes)"(
      messageId?: BytesLike | null,
      encodedData?: null
    ): TypedEventFilter<
      [string, string],
      { messageId: string; encodedData: string }
    >;

    UserRequestForAffirmation(
      messageId?: BytesLike | null,
      encodedData?: null
    ): TypedEventFilter<
      [string, string],
      { messageId: string; encodedData: string }
    >;

    "UserRequestForSignature(bytes32,bytes)"(
      messageId?: BytesLike | null,
      encodedData?: null
    ): TypedEventFilter<
      [string, string],
      { messageId: string; encodedData: string }
    >;

    UserRequestForSignature(
      messageId?: BytesLike | null,
      encodedData?: null
    ): TypedEventFilter<
      [string, string],
      { messageId: string; encodedData: string }
    >;
  };

  estimateGas: {
    destinationChainId(overrides?: CallOverrides): Promise<BigNumber>;

    failedMessageDataHash(
      _messageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    failedMessageReceiver(
      _messageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    failedMessageSender(
      _messageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxGasPerTx(overrides?: CallOverrides): Promise<BigNumber>;

    messageCallStatus(
      _messageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    messageId(overrides?: CallOverrides): Promise<BigNumber>;

    messageSender(overrides?: CallOverrides): Promise<BigNumber>;

    messageSourceChainId(overrides?: CallOverrides): Promise<BigNumber>;

    requireToConfirmMessage(
      _contract: string,
      _data: BytesLike,
      _gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requireToPassMessage(
      _contract: string,
      _data: BytesLike,
      _gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sourceChainId(overrides?: CallOverrides): Promise<BigNumber>;

    transactionHash(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    destinationChainId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    failedMessageDataHash(
      _messageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    failedMessageReceiver(
      _messageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    failedMessageSender(
      _messageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxGasPerTx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    messageCallStatus(
      _messageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    messageId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    messageSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    messageSourceChainId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireToConfirmMessage(
      _contract: string,
      _data: BytesLike,
      _gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requireToPassMessage(
      _contract: string,
      _data: BytesLike,
      _gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sourceChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transactionHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
