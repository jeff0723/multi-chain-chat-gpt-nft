/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface IOracleAdapterInterface extends utils.Interface {
  functions: {
    "getHashFromOracle(uint256,uint256)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "getHashFromOracle"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getHashFromOracle",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getHashFromOracle",
    data: BytesLike
  ): Result;

  events: {
    "HashStored(uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "HashStored"): EventFragment;
}

export interface HashStoredEventObject {
  id: BigNumber;
  hashes: string;
}
export type HashStoredEvent = TypedEvent<
  [BigNumber, string],
  HashStoredEventObject
>;

export type HashStoredEventFilter = TypedEventFilter<HashStoredEvent>;

export interface IOracleAdapter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOracleAdapterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getHashFromOracle(
      domain: BigNumberish,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { hash: string }>;
  };

  getHashFromOracle(
    domain: BigNumberish,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    getHashFromOracle(
      domain: BigNumberish,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "HashStored(uint256,bytes32)"(
      id?: BigNumberish | null,
      hashes?: BytesLike | null
    ): HashStoredEventFilter;
    HashStored(
      id?: BigNumberish | null,
      hashes?: BytesLike | null
    ): HashStoredEventFilter;
  };

  estimateGas: {
    getHashFromOracle(
      domain: BigNumberish,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getHashFromOracle(
      domain: BigNumberish,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
