/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface HashiVerifierInterface extends utils.Interface {
  functions: {
    "getBlockHeader()": FunctionFragment;
    "hashiheader()": FunctionFragment;
    "verifyOwner(bytes32,uint256,bytes,bytes32,bytes32,bytes[],bytes[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getBlockHeader" | "hashiheader" | "verifyOwner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getBlockHeader",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hashiheader",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyOwner",
    values: [
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike[],
      BytesLike[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getBlockHeader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashiheader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyOwner",
    data: BytesLike
  ): Result;

  events: {
    "accountproofcomplete()": EventFragment;
    "storageproofcomplete()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "accountproofcomplete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "storageproofcomplete"): EventFragment;
}

export interface accountproofcompleteEventObject {}
export type accountproofcompleteEvent = TypedEvent<
  [],
  accountproofcompleteEventObject
>;

export type accountproofcompleteEventFilter =
  TypedEventFilter<accountproofcompleteEvent>;

export interface storageproofcompleteEventObject {}
export type storageproofcompleteEvent = TypedEvent<
  [],
  storageproofcompleteEventObject
>;

export type storageproofcompleteEventFilter =
  TypedEventFilter<storageproofcompleteEvent>;

export interface HashiVerifier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HashiVerifierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getBlockHeader(overrides?: CallOverrides): Promise<[string]>;

    hashiheader(overrides?: CallOverrides): Promise<[string]>;

    verifyOwner(
      blockheader: BytesLike,
      tokenId: BigNumberish,
      signature: BytesLike,
      stateRoot: BytesLike,
      storageRoot: BytesLike,
      stateProof: BytesLike[],
      storageProof: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  getBlockHeader(overrides?: CallOverrides): Promise<string>;

  hashiheader(overrides?: CallOverrides): Promise<string>;

  verifyOwner(
    blockheader: BytesLike,
    tokenId: BigNumberish,
    signature: BytesLike,
    stateRoot: BytesLike,
    storageRoot: BytesLike,
    stateProof: BytesLike[],
    storageProof: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    getBlockHeader(overrides?: CallOverrides): Promise<string>;

    hashiheader(overrides?: CallOverrides): Promise<string>;

    verifyOwner(
      blockheader: BytesLike,
      tokenId: BigNumberish,
      signature: BytesLike,
      stateRoot: BytesLike,
      storageRoot: BytesLike,
      stateProof: BytesLike[],
      storageProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "accountproofcomplete()"(): accountproofcompleteEventFilter;
    accountproofcomplete(): accountproofcompleteEventFilter;

    "storageproofcomplete()"(): storageproofcompleteEventFilter;
    storageproofcomplete(): storageproofcompleteEventFilter;
  };

  estimateGas: {
    getBlockHeader(overrides?: CallOverrides): Promise<BigNumber>;

    hashiheader(overrides?: CallOverrides): Promise<BigNumber>;

    verifyOwner(
      blockheader: BytesLike,
      tokenId: BigNumberish,
      signature: BytesLike,
      stateRoot: BytesLike,
      storageRoot: BytesLike,
      stateProof: BytesLike[],
      storageProof: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getBlockHeader(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hashiheader(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifyOwner(
      blockheader: BytesLike,
      tokenId: BigNumberish,
      signature: BytesLike,
      stateRoot: BytesLike,
      storageRoot: BytesLike,
      stateProof: BytesLike[],
      storageProof: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
