/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { HashiVerifier, HashiVerifierInterface } from "../HashiVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "hashiaddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "p",
        type: "bytes32",
      },
    ],
    name: "Debug",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidHashiHash",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidStateProof",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidStorageProof",
    type: "error",
  },
  {
    inputs: [],
    name: "getBlockHeader",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "hashiheader",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "blockheader",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "stateRoot",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "storageRoot",
        type: "bytes32",
      },
      {
        internalType: "bytes[]",
        name: "stateProof",
        type: "bytes[]",
      },
      {
        internalType: "bytes[]",
        name: "storageProof",
        type: "bytes[]",
      },
    ],
    name: "verifyOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c06040527f1e34f1137efe68235a91b52a9afb6e30e08dcf86e25376a8867ebbebd463ca9960001b6080908152503480156200003b57600080fd5b50604051620010da380380620010da833981810160405281019062000061919062000106565b8073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250505062000138565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000ce82620000a1565b9050919050565b620000e081620000c1565b8114620000ec57600080fd5b50565b6000815190506200010081620000d5565b92915050565b6000602082840312156200011f576200011e6200009c565b5b60006200012f84828501620000ef565b91505092915050565b60805160a051610f7962000161600039600050506000818160a001526101f10152610f796000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063654f71a61461004657806366391e0f146100645780638c6c86d114610080575b600080fd5b61004e61009e565b60405161005b919061074a565b60405180910390f35b61007e60048036038101906100799190610a07565b6100c2565b005b6100886101ed565b604051610095919061074a565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b60006100ec336040516020016100d89190610b3e565b604051602081830303815290604052610215565b90506000610103878361025090919063ffffffff16565b9050600073bd3531da5cf5857e7cfaa92426877b022e612cf8905060006040518060a001604052808373ffffffffffffffffffffffffffffffffffffffff16815260200160018152602001600081526020018881526020017f5184c58406e07d654a5e39591c5adf95a8de48e5ea96eec2f4666d84ab248b0960001b8152509050600060405180604001604052808c60676040516020016101a5929190610bba565b6040516020818303038152906040528051906020012060001c81526020018573ffffffffffffffffffffffffffffffffffffffff168152509050505050505050505050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006102218251610277565b82604051602001610233929190610ce7565b604051602081830303815290604052805190602001209050919050565b600080600061025f8585610345565b9150915061026c81610396565b819250505092915050565b606060006001610286846104fc565b01905060008167ffffffffffffffff8111156102a5576102a46107f6565b5b6040519080825280601f01601f1916602001820160405280156102d75781602001600182028036833780820191505090505b509050600082602001820190505b60011561033a578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161032e5761032d610d16565b5b049450600085036102e5575b819350505050919050565b60008060418351036103865760008060006020860151925060408601519150606086015160001a905061037a8782858561064f565b9450945050505061038f565b60006002915091505b9250929050565b600060048111156103aa576103a9610d45565b5b8160048111156103bd576103bc610d45565b5b03156104f957600160048111156103d7576103d6610d45565b5b8160048111156103ea576103e9610d45565b5b0361042a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042190610dd1565b60405180910390fd5b6002600481111561043e5761043d610d45565b5b81600481111561045157610450610d45565b5b03610491576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048890610e3d565b60405180910390fd5b600360048111156104a5576104a4610d45565b5b8160048111156104b8576104b7610d45565b5b036104f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ef90610ecf565b60405180910390fd5b5b50565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061055a577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816105505761054f610d16565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310610597576d04ee2d6d415b85acef8100000000838161058d5761058c610d16565b5b0492506020810190505b662386f26fc1000083106105c657662386f26fc1000083816105bc576105bb610d16565b5b0492506010810190505b6305f5e10083106105ef576305f5e10083816105e5576105e4610d16565b5b0492506008810190505b612710831061061457612710838161060a57610609610d16565b5b0492506004810190505b60648310610637576064838161062d5761062c610d16565b5b0492506002810190505b600a8310610646576001810190505b80915050919050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c111561068a576000600391509150610728565b6000600187878787604051600081526020016040526040516106af9493929190610efe565b6020604051602081039080840390855afa1580156106d1573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361071f57600060019250925050610728565b80600092509250505b94509492505050565b6000819050919050565b61074481610731565b82525050565b600060208201905061075f600083018461073b565b92915050565b6000604051905090565b600080fd5b600080fd5b61078281610731565b811461078d57600080fd5b50565b60008135905061079f81610779565b92915050565b6000819050919050565b6107b8816107a5565b81146107c357600080fd5b50565b6000813590506107d5816107af565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61082e826107e5565b810181811067ffffffffffffffff8211171561084d5761084c6107f6565b5b80604052505050565b6000610860610765565b905061086c8282610825565b919050565b600067ffffffffffffffff82111561088c5761088b6107f6565b5b610895826107e5565b9050602081019050919050565b82818337600083830152505050565b60006108c46108bf84610871565b610856565b9050828152602081018484840111156108e0576108df6107e0565b5b6108eb8482856108a2565b509392505050565b600082601f830112610908576109076107db565b5b81356109188482602086016108b1565b91505092915050565b600067ffffffffffffffff82111561093c5761093b6107f6565b5b602082029050602081019050919050565b600080fd5b600061096561096084610921565b610856565b905080838252602082019050602084028301858111156109885761098761094d565b5b835b818110156109cf57803567ffffffffffffffff8111156109ad576109ac6107db565b5b8086016109ba89826108f3565b8552602085019450505060208101905061098a565b5050509392505050565b600082601f8301126109ee576109ed6107db565b5b81356109fe848260208601610952565b91505092915050565b600080600080600080600060e0888a031215610a2657610a2561076f565b5b6000610a348a828b01610790565b9750506020610a458a828b016107c6565b965050604088013567ffffffffffffffff811115610a6657610a65610774565b5b610a728a828b016108f3565b9550506060610a838a828b01610790565b9450506080610a948a828b01610790565b93505060a088013567ffffffffffffffff811115610ab557610ab4610774565b5b610ac18a828b016109d9565b92505060c088013567ffffffffffffffff811115610ae257610ae1610774565b5b610aee8a828b016109d9565b91505092959891949750929550565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b2882610afd565b9050919050565b610b3881610b1d565b82525050565b6000602082019050610b536000830184610b2f565b92915050565b610b62816107a5565b82525050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000610ba4610b9f610b9a84610b68565b610b7f565b610b72565b9050919050565b610bb481610b89565b82525050565b6000604082019050610bcf6000830185610b59565b610bdc6020830184610bab565b9392505050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a000000000000600082015250565b6000610c24601a83610be3565b9150610c2f82610bee565b601a82019050919050565b600081519050919050565b60005b83811015610c63578082015181840152602081019050610c48565b60008484015250505050565b6000610c7a82610c3a565b610c848185610be3565b9350610c94818560208601610c45565b80840191505092915050565b600081519050919050565b600081905092915050565b6000610cc182610ca0565b610ccb8185610cab565b9350610cdb818560208601610c45565b80840191505092915050565b6000610cf282610c17565b9150610cfe8285610c6f565b9150610d0a8284610cb6565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600082825260208201905092915050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000610dbb601883610d74565b9150610dc682610d85565b602082019050919050565b60006020820190508181036000830152610dea81610dae565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000610e27601f83610d74565b9150610e3282610df1565b602082019050919050565b60006020820190508181036000830152610e5681610e1a565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000610eb9602283610d74565b9150610ec482610e5d565b604082019050919050565b60006020820190508181036000830152610ee881610eac565b9050919050565b610ef881610b72565b82525050565b6000608082019050610f13600083018761073b565b610f206020830186610eef565b610f2d604083018561073b565b610f3a606083018461073b565b9594505050505056fea2646970667358221220e7225caab5274ec0b84345805b7acf378f75b961d0aff530a14412555111b56164736f6c63430008110033";

export class HashiVerifier__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    hashiaddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<HashiVerifier> {
    return super.deploy(
      hashiaddress,
      overrides || {}
    ) as Promise<HashiVerifier>;
  }
  getDeployTransaction(
    hashiaddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(hashiaddress, overrides || {});
  }
  attach(address: string): HashiVerifier {
    return super.attach(address) as HashiVerifier;
  }
  connect(signer: Signer): HashiVerifier__factory {
    return super.connect(signer) as HashiVerifier__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HashiVerifierInterface {
    return new utils.Interface(_abi) as HashiVerifierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): HashiVerifier {
    return new Contract(address, _abi, signerOrProvider) as HashiVerifier;
  }
}
