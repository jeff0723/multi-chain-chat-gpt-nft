/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IHashiVerifier,
  IHashiVerifierInterface,
} from "../IHashiVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "hashiheader",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "stateRoot",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "storageRoot",
        type: "bytes32",
      },
      {
        internalType: "bytes[]",
        name: "stateProof",
        type: "bytes[]",
      },
      {
        internalType: "bytes[]",
        name: "storageProof",
        type: "bytes[]",
      },
    ],
    name: "verifyOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IHashiVerifier__factory {
  static readonly abi = _abi;
  static createInterface(): IHashiVerifierInterface {
    return new utils.Interface(_abi) as IHashiVerifierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IHashiVerifier {
    return new Contract(address, _abi, signerOrProvider) as IHashiVerifier;
  }
}
