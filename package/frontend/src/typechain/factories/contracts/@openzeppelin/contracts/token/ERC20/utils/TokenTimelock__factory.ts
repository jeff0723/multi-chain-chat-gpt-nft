/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TokenTimelock,
  TokenTimelockInterface,
} from "../../../../../../../contracts/@openzeppelin/contracts/token/ERC20/utils/TokenTimelock";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token_",
        type: "address",
      },
      {
        internalType: "address",
        name: "beneficiary_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "releaseTime_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "beneficiary",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "release",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "releaseTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e06040523480156200001157600080fd5b5060405162000e9938038062000e998339818101604052810190620000379190620001df565b4281116200007c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200007390620002c2565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508060c08181525050505050620002e4565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200012782620000fa565b9050919050565b60006200013b826200011a565b9050919050565b6200014d816200012e565b81146200015957600080fd5b50565b6000815190506200016d8162000142565b92915050565b6200017e816200011a565b81146200018a57600080fd5b50565b6000815190506200019e8162000173565b92915050565b6000819050919050565b620001b981620001a4565b8114620001c557600080fd5b50565b600081519050620001d981620001ae565b92915050565b600080600060608486031215620001fb57620001fa620000f5565b5b60006200020b868287016200015c565b93505060206200021e868287016200018d565b92505060406200023186828701620001c8565b9150509250925092565b600082825260208201905092915050565b7f546f6b656e54696d656c6f636b3a2072656c656173652074696d65206973206260008201527f65666f72652063757272656e742074696d650000000000000000000000000000602082015250565b6000620002aa6032836200023b565b9150620002b7826200024c565b604082019050919050565b60006020820190508181036000830152620002dd816200029b565b9050919050565b60805160a05160c051610b8662000313600039600061022f0152600060b9015260006102570152610b866000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806338af3eed1461005157806386d1a69f1461006f578063b91d400114610079578063fc0c546a14610097575b600080fd5b6100596100b5565b60405161006691906105d7565b60405180910390f35b6100776100dd565b005b61008161022b565b60405161008e919061060b565b60405180910390f35b61009f610253565b6040516100ac9190610685565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6100e561022b565b421015610127576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e90610723565b60405180910390fd5b6000610131610253565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161016991906105d7565b602060405180830381865afa158015610186573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101aa9190610774565b9050600081116101ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e690610813565b60405180910390fd5b6102286101fa6100b5565b82610203610253565b73ffffffffffffffffffffffffffffffffffffffff1661027b9092919063ffffffff16565b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6102fc8363a9059cbb60e01b848460405160240161029a929190610833565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610301565b505050565b6000610363826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166103c99092919063ffffffff16565b90506000815114806103855750808060200190518101906103849190610894565b5b6103c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103bb90610933565b60405180910390fd5b505050565b60606103d884846000856103e1565b90509392505050565b606082471015610426576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041d906109c5565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161044f9190610a56565b60006040518083038185875af1925050503d806000811461048c576040519150601f19603f3d011682016040523d82523d6000602084013e610491565b606091505b50915091506104a2878383876104ae565b92505050949350505050565b60608315610510576000835103610508576104c885610523565b610507576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fe90610ab9565b60405180910390fd5b5b82905061051b565b61051a8383610546565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156105595781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058d9190610b2e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105c182610596565b9050919050565b6105d1816105b6565b82525050565b60006020820190506105ec60008301846105c8565b92915050565b6000819050919050565b610605816105f2565b82525050565b600060208201905061062060008301846105fc565b92915050565b6000819050919050565b600061064b61064661064184610596565b610626565b610596565b9050919050565b600061065d82610630565b9050919050565b600061066f82610652565b9050919050565b61067f81610664565b82525050565b600060208201905061069a6000830184610676565b92915050565b600082825260208201905092915050565b7f546f6b656e54696d656c6f636b3a2063757272656e742074696d65206973206260008201527f65666f72652072656c656173652074696d650000000000000000000000000000602082015250565b600061070d6032836106a0565b9150610718826106b1565b604082019050919050565b6000602082019050818103600083015261073c81610700565b9050919050565b600080fd5b610751816105f2565b811461075c57600080fd5b50565b60008151905061076e81610748565b92915050565b60006020828403121561078a57610789610743565b5b60006107988482850161075f565b91505092915050565b7f546f6b656e54696d656c6f636b3a206e6f20746f6b656e7320746f2072656c6560008201527f6173650000000000000000000000000000000000000000000000000000000000602082015250565b60006107fd6023836106a0565b9150610808826107a1565b604082019050919050565b6000602082019050818103600083015261082c816107f0565b9050919050565b600060408201905061084860008301856105c8565b61085560208301846105fc565b9392505050565b60008115159050919050565b6108718161085c565b811461087c57600080fd5b50565b60008151905061088e81610868565b92915050565b6000602082840312156108aa576108a9610743565b5b60006108b88482850161087f565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061091d602a836106a0565b9150610928826108c1565b604082019050919050565b6000602082019050818103600083015261094c81610910565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006109af6026836106a0565b91506109ba82610953565b604082019050919050565b600060208201905081810360008301526109de816109a2565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015610a195780820151818401526020810190506109fe565b60008484015250505050565b6000610a30826109e5565b610a3a81856109f0565b9350610a4a8185602086016109fb565b80840191505092915050565b6000610a628284610a25565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000610aa3601d836106a0565b9150610aae82610a6d565b602082019050919050565b60006020820190508181036000830152610ad281610a96565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b6000610b0082610ad9565b610b0a81856106a0565b9350610b1a8185602086016109fb565b610b2381610ae4565b840191505092915050565b60006020820190508181036000830152610b488184610af5565b90509291505056fea264697066735822122043715ab9e3f00f586149b9149057e4b033a696d7244163dfd582d216fb2b155a64736f6c63430008110033";

type TokenTimelockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenTimelockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenTimelock__factory extends ContractFactory {
  constructor(...args: TokenTimelockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    token_: string,
    beneficiary_: string,
    releaseTime_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<TokenTimelock> {
    return super.deploy(
      token_,
      beneficiary_,
      releaseTime_,
      overrides || {}
    ) as Promise<TokenTimelock>;
  }
  override getDeployTransaction(
    token_: string,
    beneficiary_: string,
    releaseTime_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      token_,
      beneficiary_,
      releaseTime_,
      overrides || {}
    );
  }
  override attach(address: string): TokenTimelock {
    return super.attach(address) as TokenTimelock;
  }
  override connect(signer: Signer): TokenTimelock__factory {
    return super.connect(signer) as TokenTimelock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenTimelockInterface {
    return new utils.Interface(_abi) as TokenTimelockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenTimelock {
    return new Contract(address, _abi, signerOrProvider) as TokenTimelock;
  }
}
