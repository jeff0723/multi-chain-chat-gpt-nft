{
  "address": "0xb4A922624a576068dE57Ea787403128d565D8042",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hashiaddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "p",
          "type": "bytes32"
        }
      ],
      "name": "Debug",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidHashiHash",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "InvalidProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStateProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStorageProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "getBlockHeader",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "blockheader",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "stateRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "storageRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes[]",
          "name": "stateProof",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes[]",
          "name": "storageProof",
          "type": "bytes[]"
        }
      ],
      "name": "verifyOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5747467dbe989272716709ff2f5f8fc36c66b8306aadf9ed76913a5b3e9be1bd",
  "receipt": {
    "to": null,
    "from": "0x3b1fDB8e7a0AFecec58Ee71FD64F5e7650d98Eb7",
    "contractAddress": "0xb4A922624a576068dE57Ea787403128d565D8042",
    "transactionIndex": 0,
    "gasUsed": "1836944",
    "logsBloom": "0x
    "blockHash": "0x6777059ad7b86bb1956dab17dd0ce720c8c6f6df767bbf417cdf3f7f9436c178",
    "transactionHash": "0x5747467dbe989272716709ff2f5f8fc36c66b8306aadf9ed76913a5b3e9be1bd",
    "logs": [],
    "blockNumber": 28263707,
    "cumulativeGasUsed": "1836944",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBB38ad32c211a2B726B1E398234c8404247c5a3c"
  ],
  "numDeployments": 1,
  "solcInputHash": "80b92621f34be5d46a530b87b9e2b68e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hashiaddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"p\",\"type\":\"bytes32\"}],\"name\":\"Debug\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidHashiHash\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStateProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStorageProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"getBlockHeader\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockheader\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"storageRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes[]\",\"name\":\"stateProof\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"storageProof\",\"type\":\"bytes[]\"}],\"name\":\"verifyOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HashiVerifier.sol\":\"HashiVerifier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"contracts/@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"contracts/@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"contracts/@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/HashiVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {MPT} from \\\"./MPT.sol\\\";\\nimport {StorageVerifier} from \\\"./StorageVerifier.sol\\\";\\nimport {IHashi} from \\\"./interfaces/IHashi.sol\\\";\\nimport {ECDSA} from \\\"./@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\ncontract HashiVerifier is StorageVerifier {\\n    using ECDSA for bytes32;\\n    using ECDSA for bytes;\\n\\n    error InvalidHashiHash();\\n\\n    bytes32 hashiheader;\\n    IHashi private immutable hashiInterface;\\n\\n    // use hashi to get the current stateroot and return the blockNumber\\n\\n    constructor(address hashiaddress) {\\n        hashiInterface = IHashi(hashiaddress);\\n    }\\n\\n    function getBlockHeader() public view returns (string memory) {\\n        // blockheader = Hashi.getHash(uint256 domain,\\n        // uint256 id,\\n        // IOracleAdapter[] memory oracleAdapters)\\n\\n        // return blockheader;\\n\\n        return\\n            \\\"0x46ef9d82ce11c07fd77ff6db917ebb25f17f0b6819a7d702d9079ceb2f9ef8ea\\\";\\n    }\\n\\n    function verifyOwner(\\n        bytes32 blockheader,\\n        uint256 tokenId,\\n        bytes memory signature,\\n        bytes32 stateRoot,\\n        bytes32 storageRoot,\\n        bytes[] memory stateProof,\\n        bytes[] memory storageProof\\n    ) external {\\n        // verify that the blockheader inputted is the current stored hashi header\\n        // Note in practice this does nothing until we verify block contents\\n        if (blockheader != hashiheader) {\\n            revert InvalidHashiHash();\\n        }\\n\\n        // recover owner for storage slot access\\n        bytes32 message = abi.encode(msg.sender).toEthSignedMessageHash();\\n        address owner = message.recover(signature);\\n\\n        // Since this contract is not deployed on a network that settles on mainnet,\\n        // We hardcode the root and bypass the block hash check\\n        // bytes32 stateRoot = 0x46ef9d82ce11c07fd77ff6db917ebb25f17f0b6819a7d702d9079ceb2f9ef8ea;\\n        address tokenAddress = 0xBd3531dA5CF5857e7CfAA92426877b022e612cf8;\\n\\n        // Dedicated proof for the Pudgy\\n        MPT.Account memory pudgyPenguins = MPT.Account({\\n            accountAddress: tokenAddress,\\n            balance: 0,\\n            nonce: 1,\\n            storageRoot: storageRoot,\\n            codeHash: 0x5184c58406e07d654a5e39591c5adf95a8de48e5ea96eec2f4666d84ab248b09\\n        });\\n\\n        // Expectation: the slot contains the address of the owner\\n        MPT.StorageSlot memory slot = MPT.StorageSlot({\\n            position: uint256(keccak256(abi.encode(tokenId, 103))),\\n            value: uint256(uint160(owner))\\n        });\\n\\n        // Then verify the proof\\n        _verifyStorage(\\n            stateRoot,\\n            pudgyPenguins,\\n            slot,\\n            stateProof,\\n            storageProof\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x0f86dd6d4324d2e46c62fc20236808d0ac51d5d212bcb80ce71bfba1c85b67dc\",\"license\":\"MIT\"},\"contracts/MPT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\n\\nlibrary MPT {\\n    using RLPReader for bytes;\\n    using RLPReader for RLPReader.RLPItem;\\n\\n    error InvalidProof(uint256 index);\\n    error InvalidAccount();\\n\\n    struct Account {\\n        address accountAddress;\\n        uint256 nonce;\\n        uint256 balance;\\n        bytes32 storageRoot;\\n        bytes32 codeHash;\\n    }\\n\\n    struct StorageSlot {\\n        uint256 position;\\n        uint256 value;\\n    }\\n\\n    // [nonce,balance,storageRoot,codeHash]\\n    function verifyAccount(\\n        bytes32 root,\\n        Account memory account,\\n        bytes[] memory proof\\n    ) internal pure returns (bool) {\\n        uint256 key = uint256(\\n            keccak256(abi.encodePacked(account.accountAddress))\\n        );\\n\\n        bytes memory leaf = verifyLeaf(root, key, proof);\\n\\n        RLPReader.RLPItem[] memory decoded = leaf.toRlpItem().toList();\\n\\n        if (decoded.length != 4) revert InvalidAccount();\\n        if (decoded[0].toUint() != account.nonce) return false;\\n        if (decoded[1].toUint() != account.balance) return false;\\n        if (decoded[2].toUint() != uint256(account.storageRoot)) return false;\\n        if (decoded[3].toUint() != uint256(account.codeHash)) return false;\\n\\n        return true;\\n    }\\n\\n    function verifyStorageSlot(\\n        bytes32 root,\\n        StorageSlot memory slot,\\n        bytes[] memory proof\\n    ) internal pure returns (bool) {\\n        uint256 key = uint256(keccak256(abi.encode(slot.position)));\\n\\n        bytes memory leaf = verifyLeaf(root, key, proof);\\n\\n        return slot.value == leaf.toRlpItem().toUint();\\n    }\\n\\n    function verifyLeaf(\\n        bytes32 root,\\n        uint256 key,\\n        bytes[] memory proof\\n    ) internal pure returns (bytes memory result) {\\n        uint256 nibble = 0;\\n        RLPReader.RLPItem[] memory node;\\n        for (uint256 index = 0; index < proof.length; ++index) {\\n            if (keccak256(proof[index]) != root) revert InvalidProof(index);\\n\\n            node = proof[index].toRlpItem().toList();\\n            if (node.length == 17) {\\n                uint256 keyNibble = (key >> (252 - (nibble++ * 4))) & 0xf;\\n                root = bytes32(node[keyNibble].toUintStrict());\\n            } else if (node.length == 2) {\\n                bytes memory prefix = node[0].toBytes();\\n\\n                bool isExtension;\\n                (isExtension, nibble) = checkEncodedPath(\\n                    prefix,\\n                    key,\\n                    nibble,\\n                    index\\n                );\\n\\n                if (isExtension) {\\n                    root = bytes32(node[1].toUintStrict());\\n                } else {\\n                    break;\\n                }\\n            }\\n        }\\n\\n        if (nibble != 64) revert InvalidProof(proof.length - 1);\\n        return node[1].toBytes();\\n    }\\n\\n    /*\\n        hex char    bits    |    node type partial     path length\\n      ----------------------------------------------------------\\n        0        0000    |       extension              even\\n        1        0001    |       extension              odd\\n        3        0011    |   terminating (leaf)         odd\\n        2        0010    |   terminating (leaf)         even\\n  */\\n    function checkEncodedPath(\\n        bytes memory prefix,\\n        uint256 key,\\n        uint256 nibble,\\n        uint256 index\\n    ) private pure returns (bool, uint256) {\\n        uint8 nodeType = uint8(prefix[0] >> 4);\\n\\n        // odd cases\\n        if (nodeType & 0x1 != 0) {\\n            uint256 keyNibble = (key >> (252 - (nibble++ * 4))) & 0xf;\\n\\n            uint256 prefixNibble = uint8(prefix[0]) & 0xf;\\n            if (prefixNibble != keyNibble) revert InvalidProof(index);\\n        }\\n\\n        uint256 prefixLen = prefix.length;\\n\\n        assert(nibble % 2 == 0);\\n        for (uint256 i = 1; i < prefixLen; ++i) {\\n            uint256 prefixByte = uint8(prefix[i]);\\n            uint256 keyByte = (key >> (248 - (nibble * 4))) & 0xff;\\n\\n            if (prefixByte != keyByte) revert InvalidProof(index);\\n\\n            nibble += 2;\\n        }\\n\\n        // return true if node is an extension and we should continue traveling the trie\\n        // also returns the new nibble count, for bookkeeping\\n        return (nodeType & 0x2 == 0, nibble);\\n    }\\n}\\n\",\"keccak256\":\"0x246ed903d03cf027dd0982679df57d6097e56f21bda7374bdcdc0df6e383ab5c\",\"license\":\"MIT\"},\"contracts/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * @author Hamdi Allam hamdi.allam97@gmail.com\\n * Please reach out with any questions or concerns\\n */\\npragma solidity >=0.5.10 <0.9.0;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item; // Item that's being iterated over.\\n        uint256 nextPtr; // Position of the next item in the list.\\n    }\\n\\n    /*\\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n     * @param self The iterator.\\n     * @return The next element in the iteration.\\n     */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint256 ptr = self.nextPtr;\\n        uint256 itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns true if the iteration has more elements.\\n     * @param self The iterator.\\n     * @return true if the iteration has more elements.\\n     */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(\\n        bytes memory item\\n    ) internal pure returns (RLPItem memory) {\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @dev Create an iterator. Reverts if item is not a list.\\n     * @param self The RLP item.\\n     * @return An 'Iterator' over the item.\\n     */\\n    function iterator(\\n        RLPItem memory self\\n    ) internal pure returns (Iterator memory) {\\n        require(isList(self));\\n\\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\\n        return item.len;\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     * @return (memPtr, len) pair: location of the item's payload in memory.\\n     */\\n    function payloadLocation(\\n        RLPItem memory item\\n    ) internal pure returns (uint256, uint256) {\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 memPtr = item.memPtr + offset;\\n        uint256 len = item.len - offset; // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\\n        (, uint256 len) = payloadLocation(item);\\n        return len;\\n    }\\n\\n    /*\\n     * @param the RLP item containing the encoded list.\\n     */\\n    function toList(\\n        RLPItem memory item\\n    ) internal pure returns (RLPItem[] memory) {\\n        require(isList(item));\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(\\n        RLPItem memory item\\n    ) internal pure returns (bytes32) {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(\\n        RLPItem memory item\\n    ) internal pure returns (bytes32) {\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(\\n        RLPItem memory item\\n    ) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte except \\\"0x80\\\" is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint256 result;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        // SEE Github Issue #5.\\n        // Summary: Most commonly used RLP libraries (i.e Geth) will encode\\n        // \\\"0\\\" as \\\"0x80\\\" instead of as \\\"0\\\". We handle this edge case explicitly\\n        // here.\\n        if (result == 0 || result == STRING_SHORT_START) {\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n\\n        uint256 result;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shift to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(memPtr, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint256) {\\n        if (item.len == 0) return 0;\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) {\\n            itemLen = 1;\\n        } else if (byte0 < STRING_LONG_START) {\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n        } else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) {\\n            return 0;\\n        } else if (\\n            byte0 < STRING_LONG_START ||\\n            (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)\\n        ) {\\n            return 1;\\n        } else if (byte0 < LIST_SHORT_START) {\\n            // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        } else {\\n            return byte0 - (LIST_LONG_START - 1) + 1;\\n        }\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(uint256 src, uint256 dest, uint256 len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len > 0) {\\n            // left over bytes. Mask is used to remove unwanted bytes from the word\\n            uint256 mask = 256 ** (WORD_SIZE - len) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask)) // zero out src\\n                let destpart := and(mload(dest), mask) // retrieve the bytes\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8cc6cca9dd8d487eb4523ddcdcfdc93c88c826be5e717642dcba49f624630da3\",\"license\":\"Apache-2.0\"},\"contracts/StorageVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n//import hardhat console.sol hardhat/console.sol\\nimport {MPT} from \\\"./MPT.sol\\\";\\n\\nabstract contract StorageVerifier {\\n    error InvalidStateProof();\\n    error InvalidStorageProof();\\n\\n    error Debug(bytes32 p);\\n\\n    function _verifyStorage(\\n        bytes32 root,\\n        MPT.Account memory contractAccount,\\n        MPT.StorageSlot memory contractSlot,\\n        bytes[] memory stateProof,\\n        bytes[] memory storageProof\\n    ) internal {\\n        if (!MPT.verifyAccount(root, contractAccount, stateProof)) {\\n            revert InvalidStateProof();\\n        }\\n        if (\\n            !MPT.verifyStorageSlot(\\n                contractAccount.storageRoot,\\n                contractSlot,\\n                storageProof\\n            )\\n        ) {\\n            revert InvalidStorageProof();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x18dfb53a11ce55240c1249d785f3e958e7b3121cf1143ed90bd746c6dc437326\",\"license\":\"MIT\"},\"contracts/interfaces/IHashi.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.17;\\n\\nimport {IOracleAdapter} from \\\"./IOracleAdapter.sol\\\";\\n\\ninterface IHashi {\\n    function getHash(\\n        uint256 domain,\\n        uint256 id,\\n        IOracleAdapter[] memory oracleAdapters\\n    ) external view returns (bytes32 hash);\\n}\\n\",\"keccak256\":\"0x05a9433fa1d26e18a5b47f0fe296bbe0ff0b9429843da1691691e83e36310ec3\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IOracleAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.17;\\n\\ninterface IOracleAdapter {\\n    event HashStored(uint256 indexed id, bytes32 indexed hashes);\\n\\n    error InvalidBlockHeaderLength(uint256 length);\\n    error InvalidBlockHeaderRLP();\\n    error ConflictingBlockHeader(\\n        uint256 blockNumber,\\n        bytes32 reportedBlockHash,\\n        bytes32 storedBlockHash\\n    );\\n\\n    /// @dev Returns the hash for a given ID, as reported by the oracle.\\n    /// @param domain Identifier for the domain to query.\\n    /// @param id Identifier for the ID to query.\\n    /// @return hash Bytes32 hash reported by the oracle for the given ID on the given domain.\\n    /// @notice MUST return bytes32(0) if the oracle has not yet reported a hash for the given ID.\\n    function getHashFromOracle(\\n        uint256 domain,\\n        uint256 id\\n    ) external view returns (bytes32 hash);\\n}\\n\",\"keccak256\":\"0x0ec391f6a6d6846efc8277b5486da60bda6b74390ca01cd960c02769c0899c4b\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162002178380380620021788339818101604052810190620000379190620000dc565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506200010e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000a48262000077565b9050919050565b620000b68162000097565b8114620000c257600080fd5b50565b600081519050620000d681620000ab565b92915050565b600060208284031215620000f557620000f462000072565b5b60006200010584828501620000c5565b91505092915050565b60805161205162000127600039600050506120516000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806366391e0f1461003b5780638c6c86d114610057575b600080fd5b61005560048036038101906100509190611652565b610075565b005b61005f6101e8565b60405161006c91906117c7565b60405180910390f35b60005487146100b0576040517fc64d98f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006100da336040516020016100c6919061182a565b604051602081830303815290604052610208565b905060006100f1878361024390919063ffffffff16565b9050600073bd3531da5cf5857e7cfaa92426877b022e612cf8905060006040518060a001604052808373ffffffffffffffffffffffffffffffffffffffff16815260200160018152602001600081526020018881526020017f5184c58406e07d654a5e39591c5adf95a8de48e5ea96eec2f4666d84ab248b0960001b8152509050600060405180604001604052808c60676040516020016101939291906118a6565b6040516020818303038152906040528051906020012060001c81526020018573ffffffffffffffffffffffffffffffffffffffff1681525090506101da8983838a8a61026a565b505050505050505050505050565b6060604051806080016040528060428152602001611fda60429139905090565b600061021482516102f7565b8260405160200161022692919061199e565b604051602081830303815290604052805190602001209050919050565b600080600061025285856103c5565b9150915061025f81610416565b819250505092915050565b61027585858461057c565b6102ab576040517fd5d82fd400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6102ba8460600151848361070b565b6102f0576040517f335a0b1300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b6060600060016103068461076f565b01905060008167ffffffffffffffff81111561032557610324611441565b5b6040519080825280601f01601f1916602001820160405280156103575781602001600182028036833780820191505090505b509050600082602001820190505b6001156103ba578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816103ae576103ad6119cd565b5b04945060008503610365575b819350505050919050565b60008060418351036104065760008060006020860151925060408601519150606086015160001a90506103fa878285856108c2565b9450945050505061040f565b60006002915091505b9250929050565b6000600481111561042a576104296119fc565b5b81600481111561043d5761043c6119fc565b5b03156105795760016004811115610457576104566119fc565b5b81600481111561046a576104696119fc565b5b036104aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a190611a77565b60405180910390fd5b600260048111156104be576104bd6119fc565b5b8160048111156104d1576104d06119fc565b5b03610511576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050890611ae3565b60405180910390fd5b60036004811115610525576105246119fc565b5b816004811115610538576105376119fc565b5b03610578576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056f90611b75565b60405180910390fd5b5b50565b60008083600001516040516020016105949190611bdd565b6040516020818303038152906040528051906020012060001c905060006105bc8683866109a4565b905060006105d16105cc83610bc7565b610bf5565b9050600481511461060e576040517f6d187b2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85602001516106378260008151811061062a57610629611bf8565b5b6020026020010151610d0a565b146106485760009350505050610704565b85604001516106718260018151811061066457610663611bf8565b5b6020026020010151610d0a565b146106825760009350505050610704565b856060015160001c6106ae826002815181106106a1576106a0611bf8565b5b6020026020010151610d0a565b146106bf5760009350505050610704565b856080015160001c6106eb826003815181106106de576106dd611bf8565b5b6020026020010151610d0a565b146106fc5760009350505050610704565b600193505050505b9392505050565b60008083600001516040516020016107239190611c27565b6040516020818303038152906040528051906020012060001c9050600061074b8683866109a4565b905061075e61075982610bc7565b610d0a565b856020015114925050509392505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106107cd577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816107c3576107c26119cd565b5b0492506040810190505b6d04ee2d6d415b85acef8100000000831061080a576d04ee2d6d415b85acef81000000008381610800576107ff6119cd565b5b0492506020810190505b662386f26fc10000831061083957662386f26fc10000838161082f5761082e6119cd565b5b0492506010810190505b6305f5e1008310610862576305f5e1008381610858576108576119cd565b5b0492506008810190505b612710831061088757612710838161087d5761087c6119cd565b5b0492506004810190505b606483106108aa57606483816108a05761089f6119cd565b5b0492506002810190505b600a83106108b9576001810190505b80915050919050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156108fd57600060039150915061099b565b6000600187878787604051600081526020016040526040516109229493929190611c60565b6020604051602081039080840390855afa158015610944573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109925760006001925092505061099b565b80600092509250505b94509492505050565b60606000606060005b8451811015610b4557868582815181106109ca576109c9611bf8565b5b60200260200101518051906020012014610a1b57806040517f5e3fa051000000000000000000000000000000000000000000000000000000008152600401610a129190611c27565b60405180910390fd5b610a46610a41868381518110610a3457610a33611bf8565b5b6020026020010151610bc7565b610bf5565b91506011825103610aae576000600f60048580610a6290611cd4565b9650610a6e9190611d1c565b60fc610a7a9190611d5e565b88901c169050610aa3838281518110610a9657610a95611bf8565b5b6020026020010151610d64565b60001b975050610b34565b6002825103610b33576000610add83600081518110610ad057610acf611bf8565b5b6020026020010151610d9b565b90506000610aed82898786610e2e565b80965081925050508015610b2957610b1f84600181518110610b1257610b11611bf8565b5b6020026020010151610d64565b60001b9850610b30565b5050610b45565b50505b5b80610b3e90611cd4565b90506109ad565b5060408214610b985760018451610b5c9190611d5e565b6040517f5e3fa051000000000000000000000000000000000000000000000000000000008152600401610b8f9190611c27565b60405180910390fd5b610bbc81600181518110610baf57610bae611bf8565b5b6020026020010151610d9b565b925050509392505050565b610bcf61138c565b600060208301905060405180604001604052808451815260200182815250915050919050565b6060610c008261102b565b610c0957600080fd5b6000610c1483611078565b905060008167ffffffffffffffff811115610c3257610c31611441565b5b604051908082528060200260200182016040528015610c6b57816020015b610c5861138c565b815260200190600190039081610c505790505b5090506000610c7d8560200151611105565b8560200151610c8c9190611d92565b9050600080600090505b84811015610cfd57610ca7836111c4565b9150604051806040016040528083815260200184815250848281518110610cd157610cd0611bf8565b5b60200260200101819052508183610ce89190611d92565b92508080610cf590611cd4565b915050610c96565b5082945050505050919050565b6000808260000151118015610d2457506021826000015111155b610d2d57600080fd5b600080610d39846112a0565b915091506000825190506020821015610d5957816020036101000a810490505b809350505050919050565b60006021826000015114610d7757600080fd5b60008060018460200151610d8b9190611d92565b9050805191508192505050919050565b60606000826000015111610dae57600080fd5b600080610dba846112a0565b9150915060008167ffffffffffffffff811115610dda57610dd9611441565b5b6040519080825280601f01601f191660200182016040528015610e0c5781602001600182028036833780820191505090505b5090506000816020019050610e228482856112ea565b81945050505050919050565b6000806000600487600081518110610e4957610e48611bf8565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c905060006001821660ff1614610f2d576000600f60048780610e9c90611cd4565b9850610ea89190611d1c565b60fc610eb49190611d5e565b88901c1690506000600f89600081518110610ed257610ed1611bf8565b5b602001015160f81c60f81b60f81c1660ff169050818114610f2a57856040517f5e3fa051000000000000000000000000000000000000000000000000000000008152600401610f219190611c27565b60405180910390fd5b50505b6000875190506000600287610f429190611dc6565b14610f5057610f4f611df7565b5b6000600190505b81811015611010576000898281518110610f7457610f73611bf8565b5b602001015160f81c60f81b60f81c60ff169050600060ff60048a610f989190611d1c565b60f8610fa49190611d5e565b8b901c169050808214610fee57876040517f5e3fa051000000000000000000000000000000000000000000000000000000008152600401610fe59190611c27565b60405180910390fd5b600289610ffb9190611d92565b985050508061100990611cd4565b9050610f57565b5060006002831660ff16148693509350505094509492505050565b6000808260000151036110415760009050611073565b60008083602001519050805160001a915060c060ff168260ff16101561106c57600092505050611073565b6001925050505b919050565b60008082600001510361108e5760009050611100565b60008061109e8460200151611105565b84602001516110ad9190611d92565b90506000846000015185602001516110c59190611d92565b90505b808210156110f9576110d9826111c4565b826110e49190611d92565b915082806110f190611cd4565b9350506110c8565b8293505050505b919050565b600080825160001a9050608060ff168110156111255760009150506111bf565b60b860ff1681108061114a575060c060ff168110158015611149575060f860ff1681105b5b156111595760019150506111bf565b60c060ff168110156111945760018060b86111749190611e26565b60ff16826111829190611d5e565b61118c9190611d92565b9150506111bf565b60018060f86111a39190611e26565b60ff16826111b19190611d5e565b6111bb9190611d92565b9150505b919050565b6000806000835160001a9050608060ff168110156111e55760019150611296565b60b860ff16811015611214576001608060ff16826112039190611d5e565b61120d9190611d92565b9150611295565b60c060ff168110156112445760b78103600185019450806020036101000a85510460018201810193505050611294565b60f860ff1681101561127357600160c060ff16826112629190611d5e565b61126c9190611d92565b9150611293565b60f78103600185019450806020036101000a855104600182018101935050505b5b5b5b8192505050919050565b60008060006112b28460200151611105565b905060008185602001516112c69190611d92565b905060008286600001516112da9190611d5e565b9050818194509450505050915091565b6000810315611387575b602060ff16811061133e5782518252602060ff16836113139190611d92565b9250602060ff16826113259190611d92565b9150602060ff16816113379190611d5e565b90506112f4565b6000811115611386576000600182602060ff1661135b9190611d5e565b6101006113689190611f8e565b6113729190611d5e565b905080198451168184511681811785525050505b5b505050565b604051806040016040528060008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6113cd816113ba565b81146113d857600080fd5b50565b6000813590506113ea816113c4565b92915050565b6000819050919050565b611403816113f0565b811461140e57600080fd5b50565b600081359050611420816113fa565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61147982611430565b810181811067ffffffffffffffff8211171561149857611497611441565b5b80604052505050565b60006114ab6113a6565b90506114b78282611470565b919050565b600067ffffffffffffffff8211156114d7576114d6611441565b5b6114e082611430565b9050602081019050919050565b82818337600083830152505050565b600061150f61150a846114bc565b6114a1565b90508281526020810184848401111561152b5761152a61142b565b5b6115368482856114ed565b509392505050565b600082601f83011261155357611552611426565b5b81356115638482602086016114fc565b91505092915050565b600067ffffffffffffffff82111561158757611586611441565b5b602082029050602081019050919050565b600080fd5b60006115b06115ab8461156c565b6114a1565b905080838252602082019050602084028301858111156115d3576115d2611598565b5b835b8181101561161a57803567ffffffffffffffff8111156115f8576115f7611426565b5b808601611605898261153e565b855260208501945050506020810190506115d5565b5050509392505050565b600082601f83011261163957611638611426565b5b813561164984826020860161159d565b91505092915050565b600080600080600080600060e0888a031215611671576116706113b0565b5b600061167f8a828b016113db565b97505060206116908a828b01611411565b965050604088013567ffffffffffffffff8111156116b1576116b06113b5565b5b6116bd8a828b0161153e565b95505060606116ce8a828b016113db565b94505060806116df8a828b016113db565b93505060a088013567ffffffffffffffff811115611700576116ff6113b5565b5b61170c8a828b01611624565b92505060c088013567ffffffffffffffff81111561172d5761172c6113b5565b5b6117398a828b01611624565b91505092959891949750929550565b600081519050919050565b600082825260208201905092915050565b60005b83811015611782578082015181840152602081019050611767565b60008484015250505050565b600061179982611748565b6117a38185611753565b93506117b3818560208601611764565b6117bc81611430565b840191505092915050565b600060208201905081810360008301526117e1818461178e565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611814826117e9565b9050919050565b61182481611809565b82525050565b600060208201905061183f600083018461181b565b92915050565b61184e816113f0565b82525050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b600061189061188b61188684611854565b61186b565b61185e565b9050919050565b6118a081611875565b82525050565b60006040820190506118bb6000830185611845565b6118c86020830184611897565b9392505050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a000000000000600082015250565b6000611910601a836118cf565b915061191b826118da565b601a82019050919050565b600061193182611748565b61193b81856118cf565b935061194b818560208601611764565b80840191505092915050565b600081519050919050565b600081905092915050565b600061197882611957565b6119828185611962565b9350611992818560208601611764565b80840191505092915050565b60006119a982611903565b91506119b58285611926565b91506119c1828461196d565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000611a61601883611753565b9150611a6c82611a2b565b602082019050919050565b60006020820190508181036000830152611a9081611a54565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000611acd601f83611753565b9150611ad882611a97565b602082019050919050565b60006020820190508181036000830152611afc81611ac0565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000611b5f602283611753565b9150611b6a82611b03565b604082019050919050565b60006020820190508181036000830152611b8e81611b52565b9050919050565b60008160601b9050919050565b6000611bad82611b95565b9050919050565b6000611bbf82611ba2565b9050919050565b611bd7611bd282611809565b611bb4565b82525050565b6000611be98284611bc6565b60148201915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082019050611c3c6000830184611845565b92915050565b611c4b816113ba565b82525050565b611c5a8161185e565b82525050565b6000608082019050611c756000830187611c42565b611c826020830186611c51565b611c8f6040830185611c42565b611c9c6060830184611c42565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611cdf826113f0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611d1157611d10611ca5565b5b600182019050919050565b6000611d27826113f0565b9150611d32836113f0565b9250828202611d40816113f0565b91508282048414831517611d5757611d56611ca5565b5b5092915050565b6000611d69826113f0565b9150611d74836113f0565b9250828203905081811115611d8c57611d8b611ca5565b5b92915050565b6000611d9d826113f0565b9150611da8836113f0565b9250828201905080821115611dc057611dbf611ca5565b5b92915050565b6000611dd1826113f0565b9150611ddc836113f0565b925082611dec57611deb6119cd565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6000611e318261185e565b9150611e3c8361185e565b9250828203905060ff811115611e5557611e54611ca5565b5b92915050565b60008160011c9050919050565b6000808291508390505b6001851115611eb257808604811115611e8e57611e8d611ca5565b5b6001851615611e9d5780820291505b8081029050611eab85611e5b565b9450611e72565b94509492505050565b600082611ecb5760019050611f87565b81611ed95760009050611f87565b8160018114611eef5760028114611ef957611f28565b6001915050611f87565b60ff841115611f0b57611f0a611ca5565b5b8360020a915084821115611f2257611f21611ca5565b5b50611f87565b5060208310610133831016604e8410600b8410161715611f5d5782820a905083811115611f5857611f57611ca5565b5b611f87565b611f6a8484846001611e68565b92509050818404811115611f8157611f80611ca5565b5b81810290505b9392505050565b6000611f99826113f0565b9150611fa4836113f0565b9250611fd17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611ebb565b90509291505056fe307834366566396438326365313163303766643737666636646239313765626232356631376630623638313961376437303264393037396365623266396566386561a26469706673582212201656251adea4a21db4c621605dce1cbdc6f44abc578b34d349b48d49869b2f9464736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806366391e0f1461003b5780638c6c86d114610057575b600080fd5b61005560048036038101906100509190611652565b610075565b005b61005f6101e8565b60405161006c91906117c7565b60405180910390f35b60005487146100b0576040517fc64d98f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006100da336040516020016100c6919061182a565b604051602081830303815290604052610208565b905060006100f1878361024390919063ffffffff16565b9050600073bd3531da5cf5857e7cfaa92426877b022e612cf8905060006040518060a001604052808373ffffffffffffffffffffffffffffffffffffffff16815260200160018152602001600081526020018881526020017f5184c58406e07d654a5e39591c5adf95a8de48e5ea96eec2f4666d84ab248b0960001b8152509050600060405180604001604052808c60676040516020016101939291906118a6565b6040516020818303038152906040528051906020012060001c81526020018573ffffffffffffffffffffffffffffffffffffffff1681525090506101da8983838a8a61026a565b505050505050505050505050565b6060604051806080016040528060428152602001611fda60429139905090565b600061021482516102f7565b8260405160200161022692919061199e565b604051602081830303815290604052805190602001209050919050565b600080600061025285856103c5565b9150915061025f81610416565b819250505092915050565b61027585858461057c565b6102ab576040517fd5d82fd400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6102ba8460600151848361070b565b6102f0576040517f335a0b1300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b6060600060016103068461076f565b01905060008167ffffffffffffffff81111561032557610324611441565b5b6040519080825280601f01601f1916602001820160405280156103575781602001600182028036833780820191505090505b509050600082602001820190505b6001156103ba578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816103ae576103ad6119cd565b5b04945060008503610365575b819350505050919050565b60008060418351036104065760008060006020860151925060408601519150606086015160001a90506103fa878285856108c2565b9450945050505061040f565b60006002915091505b9250929050565b6000600481111561042a576104296119fc565b5b81600481111561043d5761043c6119fc565b5b03156105795760016004811115610457576104566119fc565b5b81600481111561046a576104696119fc565b5b036104aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a190611a77565b60405180910390fd5b600260048111156104be576104bd6119fc565b5b8160048111156104d1576104d06119fc565b5b03610511576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050890611ae3565b60405180910390fd5b60036004811115610525576105246119fc565b5b816004811115610538576105376119fc565b5b03610578576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056f90611b75565b60405180910390fd5b5b50565b60008083600001516040516020016105949190611bdd565b6040516020818303038152906040528051906020012060001c905060006105bc8683866109a4565b905060006105d16105cc83610bc7565b610bf5565b9050600481511461060e576040517f6d187b2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85602001516106378260008151811061062a57610629611bf8565b5b6020026020010151610d0a565b146106485760009350505050610704565b85604001516106718260018151811061066457610663611bf8565b5b6020026020010151610d0a565b146106825760009350505050610704565b856060015160001c6106ae826002815181106106a1576106a0611bf8565b5b6020026020010151610d0a565b146106bf5760009350505050610704565b856080015160001c6106eb826003815181106106de576106dd611bf8565b5b6020026020010151610d0a565b146106fc5760009350505050610704565b600193505050505b9392505050565b60008083600001516040516020016107239190611c27565b6040516020818303038152906040528051906020012060001c9050600061074b8683866109a4565b905061075e61075982610bc7565b610d0a565b856020015114925050509392505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106107cd577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816107c3576107c26119cd565b5b0492506040810190505b6d04ee2d6d415b85acef8100000000831061080a576d04ee2d6d415b85acef81000000008381610800576107ff6119cd565b5b0492506020810190505b662386f26fc10000831061083957662386f26fc10000838161082f5761082e6119cd565b5b0492506010810190505b6305f5e1008310610862576305f5e1008381610858576108576119cd565b5b0492506008810190505b612710831061088757612710838161087d5761087c6119cd565b5b0492506004810190505b606483106108aa57606483816108a05761089f6119cd565b5b0492506002810190505b600a83106108b9576001810190505b80915050919050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156108fd57600060039150915061099b565b6000600187878787604051600081526020016040526040516109229493929190611c60565b6020604051602081039080840390855afa158015610944573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109925760006001925092505061099b565b80600092509250505b94509492505050565b60606000606060005b8451811015610b4557868582815181106109ca576109c9611bf8565b5b60200260200101518051906020012014610a1b57806040517f5e3fa051000000000000000000000000000000000000000000000000000000008152600401610a129190611c27565b60405180910390fd5b610a46610a41868381518110610a3457610a33611bf8565b5b6020026020010151610bc7565b610bf5565b91506011825103610aae576000600f60048580610a6290611cd4565b9650610a6e9190611d1c565b60fc610a7a9190611d5e565b88901c169050610aa3838281518110610a9657610a95611bf8565b5b6020026020010151610d64565b60001b975050610b34565b6002825103610b33576000610add83600081518110610ad057610acf611bf8565b5b6020026020010151610d9b565b90506000610aed82898786610e2e565b80965081925050508015610b2957610b1f84600181518110610b1257610b11611bf8565b5b6020026020010151610d64565b60001b9850610b30565b5050610b45565b50505b5b80610b3e90611cd4565b90506109ad565b5060408214610b985760018451610b5c9190611d5e565b6040517f5e3fa051000000000000000000000000000000000000000000000000000000008152600401610b8f9190611c27565b60405180910390fd5b610bbc81600181518110610baf57610bae611bf8565b5b6020026020010151610d9b565b925050509392505050565b610bcf61138c565b600060208301905060405180604001604052808451815260200182815250915050919050565b6060610c008261102b565b610c0957600080fd5b6000610c1483611078565b905060008167ffffffffffffffff811115610c3257610c31611441565b5b604051908082528060200260200182016040528015610c6b57816020015b610c5861138c565b815260200190600190039081610c505790505b5090506000610c7d8560200151611105565b8560200151610c8c9190611d92565b9050600080600090505b84811015610cfd57610ca7836111c4565b9150604051806040016040528083815260200184815250848281518110610cd157610cd0611bf8565b5b60200260200101819052508183610ce89190611d92565b92508080610cf590611cd4565b915050610c96565b5082945050505050919050565b6000808260000151118015610d2457506021826000015111155b610d2d57600080fd5b600080610d39846112a0565b915091506000825190506020821015610d5957816020036101000a810490505b809350505050919050565b60006021826000015114610d7757600080fd5b60008060018460200151610d8b9190611d92565b9050805191508192505050919050565b60606000826000015111610dae57600080fd5b600080610dba846112a0565b9150915060008167ffffffffffffffff811115610dda57610dd9611441565b5b6040519080825280601f01601f191660200182016040528015610e0c5781602001600182028036833780820191505090505b5090506000816020019050610e228482856112ea565b81945050505050919050565b6000806000600487600081518110610e4957610e48611bf8565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c905060006001821660ff1614610f2d576000600f60048780610e9c90611cd4565b9850610ea89190611d1c565b60fc610eb49190611d5e565b88901c1690506000600f89600081518110610ed257610ed1611bf8565b5b602001015160f81c60f81b60f81c1660ff169050818114610f2a57856040517f5e3fa051000000000000000000000000000000000000000000000000000000008152600401610f219190611c27565b60405180910390fd5b50505b6000875190506000600287610f429190611dc6565b14610f5057610f4f611df7565b5b6000600190505b81811015611010576000898281518110610f7457610f73611bf8565b5b602001015160f81c60f81b60f81c60ff169050600060ff60048a610f989190611d1c565b60f8610fa49190611d5e565b8b901c169050808214610fee57876040517f5e3fa051000000000000000000000000000000000000000000000000000000008152600401610fe59190611c27565b60405180910390fd5b600289610ffb9190611d92565b985050508061100990611cd4565b9050610f57565b5060006002831660ff16148693509350505094509492505050565b6000808260000151036110415760009050611073565b60008083602001519050805160001a915060c060ff168260ff16101561106c57600092505050611073565b6001925050505b919050565b60008082600001510361108e5760009050611100565b60008061109e8460200151611105565b84602001516110ad9190611d92565b90506000846000015185602001516110c59190611d92565b90505b808210156110f9576110d9826111c4565b826110e49190611d92565b915082806110f190611cd4565b9350506110c8565b8293505050505b919050565b600080825160001a9050608060ff168110156111255760009150506111bf565b60b860ff1681108061114a575060c060ff168110158015611149575060f860ff1681105b5b156111595760019150506111bf565b60c060ff168110156111945760018060b86111749190611e26565b60ff16826111829190611d5e565b61118c9190611d92565b9150506111bf565b60018060f86111a39190611e26565b60ff16826111b19190611d5e565b6111bb9190611d92565b9150505b919050565b6000806000835160001a9050608060ff168110156111e55760019150611296565b60b860ff16811015611214576001608060ff16826112039190611d5e565b61120d9190611d92565b9150611295565b60c060ff168110156112445760b78103600185019450806020036101000a85510460018201810193505050611294565b60f860ff1681101561127357600160c060ff16826112629190611d5e565b61126c9190611d92565b9150611293565b60f78103600185019450806020036101000a855104600182018101935050505b5b5b5b8192505050919050565b60008060006112b28460200151611105565b905060008185602001516112c69190611d92565b905060008286600001516112da9190611d5e565b9050818194509450505050915091565b6000810315611387575b602060ff16811061133e5782518252602060ff16836113139190611d92565b9250602060ff16826113259190611d92565b9150602060ff16816113379190611d5e565b90506112f4565b6000811115611386576000600182602060ff1661135b9190611d5e565b6101006113689190611f8e565b6113729190611d5e565b905080198451168184511681811785525050505b5b505050565b604051806040016040528060008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6113cd816113ba565b81146113d857600080fd5b50565b6000813590506113ea816113c4565b92915050565b6000819050919050565b611403816113f0565b811461140e57600080fd5b50565b600081359050611420816113fa565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61147982611430565b810181811067ffffffffffffffff8211171561149857611497611441565b5b80604052505050565b60006114ab6113a6565b90506114b78282611470565b919050565b600067ffffffffffffffff8211156114d7576114d6611441565b5b6114e082611430565b9050602081019050919050565b82818337600083830152505050565b600061150f61150a846114bc565b6114a1565b90508281526020810184848401111561152b5761152a61142b565b5b6115368482856114ed565b509392505050565b600082601f83011261155357611552611426565b5b81356115638482602086016114fc565b91505092915050565b600067ffffffffffffffff82111561158757611586611441565b5b602082029050602081019050919050565b600080fd5b60006115b06115ab8461156c565b6114a1565b905080838252602082019050602084028301858111156115d3576115d2611598565b5b835b8181101561161a57803567ffffffffffffffff8111156115f8576115f7611426565b5b808601611605898261153e565b855260208501945050506020810190506115d5565b5050509392505050565b600082601f83011261163957611638611426565b5b813561164984826020860161159d565b91505092915050565b600080600080600080600060e0888a031215611671576116706113b0565b5b600061167f8a828b016113db565b97505060206116908a828b01611411565b965050604088013567ffffffffffffffff8111156116b1576116b06113b5565b5b6116bd8a828b0161153e565b95505060606116ce8a828b016113db565b94505060806116df8a828b016113db565b93505060a088013567ffffffffffffffff811115611700576116ff6113b5565b5b61170c8a828b01611624565b92505060c088013567ffffffffffffffff81111561172d5761172c6113b5565b5b6117398a828b01611624565b91505092959891949750929550565b600081519050919050565b600082825260208201905092915050565b60005b83811015611782578082015181840152602081019050611767565b60008484015250505050565b600061179982611748565b6117a38185611753565b93506117b3818560208601611764565b6117bc81611430565b840191505092915050565b600060208201905081810360008301526117e1818461178e565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611814826117e9565b9050919050565b61182481611809565b82525050565b600060208201905061183f600083018461181b565b92915050565b61184e816113f0565b82525050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b600061189061188b61188684611854565b61186b565b61185e565b9050919050565b6118a081611875565b82525050565b60006040820190506118bb6000830185611845565b6118c86020830184611897565b9392505050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a000000000000600082015250565b6000611910601a836118cf565b915061191b826118da565b601a82019050919050565b600061193182611748565b61193b81856118cf565b935061194b818560208601611764565b80840191505092915050565b600081519050919050565b600081905092915050565b600061197882611957565b6119828185611962565b9350611992818560208601611764565b80840191505092915050565b60006119a982611903565b91506119b58285611926565b91506119c1828461196d565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000611a61601883611753565b9150611a6c82611a2b565b602082019050919050565b60006020820190508181036000830152611a9081611a54565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000611acd601f83611753565b9150611ad882611a97565b602082019050919050565b60006020820190508181036000830152611afc81611ac0565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000611b5f602283611753565b9150611b6a82611b03565b604082019050919050565b60006020820190508181036000830152611b8e81611b52565b9050919050565b60008160601b9050919050565b6000611bad82611b95565b9050919050565b6000611bbf82611ba2565b9050919050565b611bd7611bd282611809565b611bb4565b82525050565b6000611be98284611bc6565b60148201915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082019050611c3c6000830184611845565b92915050565b611c4b816113ba565b82525050565b611c5a8161185e565b82525050565b6000608082019050611c756000830187611c42565b611c826020830186611c51565b611c8f6040830185611c42565b611c9c6060830184611c42565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611cdf826113f0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611d1157611d10611ca5565b5b600182019050919050565b6000611d27826113f0565b9150611d32836113f0565b9250828202611d40816113f0565b91508282048414831517611d5757611d56611ca5565b5b5092915050565b6000611d69826113f0565b9150611d74836113f0565b9250828203905081811115611d8c57611d8b611ca5565b5b92915050565b6000611d9d826113f0565b9150611da8836113f0565b9250828201905080821115611dc057611dbf611ca5565b5b92915050565b6000611dd1826113f0565b9150611ddc836113f0565b925082611dec57611deb6119cd565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6000611e318261185e565b9150611e3c8361185e565b9250828203905060ff811115611e5557611e54611ca5565b5b92915050565b60008160011c9050919050565b6000808291508390505b6001851115611eb257808604811115611e8e57611e8d611ca5565b5b6001851615611e9d5780820291505b8081029050611eab85611e5b565b9450611e72565b94509492505050565b600082611ecb5760019050611f87565b81611ed95760009050611f87565b8160018114611eef5760028114611ef957611f28565b6001915050611f87565b60ff841115611f0b57611f0a611ca5565b5b8360020a915084821115611f2257611f21611ca5565b5b50611f87565b5060208310610133831016604e8410600b8410161715611f5d5782820a905083811115611f5857611f57611ca5565b5b611f87565b611f6a8484846001611e68565b92509050818404811115611f8157611f80611ca5565b5b81810290505b9392505050565b6000611f99826113f0565b9150611fa4836113f0565b9250611fd17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611ebb565b90509291505056fe307834366566396438326365313163303766643737666636646239313765626232356631376630623638313961376437303264393037396365623266396566386561a26469706673582212201656251adea4a21db4c621605dce1cbdc6f44abc578b34d349b48d49869b2f9464736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3374,
        "contract": "contracts/HashiVerifier.sol:HashiVerifier",
        "label": "hashiheader",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      }
    }
  }
}