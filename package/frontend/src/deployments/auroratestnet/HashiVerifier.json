{
  "address": "0x4C0b2D94Eaf9A63EECaCeFba2B2e89E047657d14",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hashiaddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "p",
          "type": "bytes32"
        }
      ],
      "name": "Debug",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "InvalidProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStateProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStorageProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "getBlockHeader",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hashiheader",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "blockheader",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "messageSender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "storageRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes[]",
          "name": "stateProof",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes[]",
          "name": "storageProof",
          "type": "bytes[]"
        }
      ],
      "name": "verifyOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x48346ade90d19fcaad3932582087b2e4eff6bbd0c6382697ddf8a8729627da56",
  "receipt": {
    "to": null,
    "from": "0x1BE55EE7E2e7E3ff9fA745f807a9FaCf50538a4d",
    "contractAddress": "0x4C0b2D94Eaf9A63EECaCeFba2B2e89E047657d14",
    "transactionIndex": 0,
    "gasUsed": "1877193",
    "logsBloom": "0x
    "blockHash": "0xe14948f703fc748699d31e95ddec1460f3d61aa6852edd57173b6b3762b05f82",
    "transactionHash": "0x48346ade90d19fcaad3932582087b2e4eff6bbd0c6382697ddf8a8729627da56",
    "logs": [],
    "blockNumber": 128191925,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBB38ad32c211a2B726B1E398234c8404247c5a3c"
  ],
  "numDeployments": 1,
  "solcInputHash": "ee4c754c5ab5e5b8423fad35a6857ec1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hashiaddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"p\",\"type\":\"bytes32\"}],\"name\":\"Debug\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStateProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStorageProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"getBlockHeader\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashiheader\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockheader\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"messageSender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"storageRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes[]\",\"name\":\"stateProof\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"storageProof\",\"type\":\"bytes[]\"}],\"name\":\"verifyOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HashiVerifier.sol\":\"HashiVerifier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"contracts/@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"contracts/@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"contracts/@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/HashiVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// creds to @cometh-game\\npragma solidity >=0.8.0;\\n\\nimport {MPT} from \\\"./MPT.sol\\\";\\nimport {StorageVerifier} from \\\"./StorageVerifier.sol\\\";\\nimport {IHashi} from \\\"./interfaces/IHashi.sol\\\";\\nimport {ECDSA} from \\\"./@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\ncontract HashiVerifier is StorageVerifier {\\n    using ECDSA for bytes32;\\n    using ECDSA for bytes;\\n\\n    bytes32 public immutable hashiheader =\\n        0x1e34f1137efe68235a91b52a9afb6e30e08dcf86e25376a8867ebbebd463ca99;\\n    IHashi private immutable hashiInterface;\\n\\n    // use hashi to get the current stateroot and return the blockNumber\\n\\n    constructor(address hashiaddress) {\\n        hashiInterface = IHashi(hashiaddress);\\n    }\\n\\n    function getBlockHeader() public view returns (bytes32) {\\n        // because hashi is not live we hardcode the hashiheader\\n        // when hashi is live\\n        // blockheader = Hashi.getHash(uint256 domain, uint256 id, IOracleAdapter[] memory oracleAdapters)\\n        // return blockheader;\\n\\n        return hashiheader;\\n    }\\n\\n    function verifyOwner(\\n        bytes32 blockheader,\\n        uint256 tokenId,\\n        address messageSender,\\n        bytes memory signature,\\n        bytes32 storageRoot,\\n        bytes[] memory stateProof,\\n        bytes[] memory storageProof\\n    ) external {\\n        // verify that the blockheader inputted is the current stored hashi header\\n        // Note in practice this does nothing until we verify block contents\\n\\n        require(blockheader == hashiheader, \\\"blockheader is incorrect\\\");\\n        // recover owner for storage slot access\\n        bytes32 message = abi.encode(messageSender).toEthSignedMessageHash();\\n        address owner = message.recover(signature);\\n\\n        // Since this contract is not deployed on a network that settles on mainnet,\\n        // We hardcode the root and bypass the block hash check\\n        bytes32 stateRoot = 0xff814b221f1c0d28fe442a044153519cd208eac664cac2f31a95bee9bd040e40;\\n        address tokenAddress = 0xeF1a89cbfAbE59397FfdA11Fc5DF293E9bC5Db90;\\n\\n        // Expectation: the provided proof is dedicated for the Ghoul\\n        MPT.Account memory basedGhouls = MPT.Account({\\n            accountAddress: tokenAddress,\\n            balance: 0,\\n            nonce: 1,\\n            storageRoot: storageRoot,\\n            codeHash: 0xfc1ea81db44e2de921b958dc92da921a18968ff3f3465bd475fb86dd1af03986\\n        });\\n        // Expectation: the slot contains the address of the owner\\n        MPT.StorageSlot memory slot = MPT.StorageSlot({\\n            position: uint256(keccak256(abi.encode(tokenId, 103))),\\n            value: uint256(uint160(owner))\\n        });\\n\\n        // Then verify the proof\\n        _verifyStorage(stateRoot, basedGhouls, slot, stateProof, storageProof);\\n    }\\n}\\n\",\"keccak256\":\"0xbe7583fc591f6edd103ab901264647a932e83867d303eac5e1ecfd8572366d0e\",\"license\":\"MIT\"},\"contracts/MPT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\n\\nlibrary MPT {\\n    using RLPReader for bytes;\\n    using RLPReader for RLPReader.RLPItem;\\n\\n    error InvalidProof(uint256 index);\\n    error InvalidAccount();\\n\\n    struct Account {\\n        address accountAddress;\\n        uint256 nonce;\\n        uint256 balance;\\n        bytes32 storageRoot;\\n        bytes32 codeHash;\\n    }\\n\\n    struct StorageSlot {\\n        uint256 position;\\n        uint256 value;\\n    }\\n\\n    // [nonce,balance,storageRoot,codeHash]\\n    function verifyAccount(\\n        bytes32 root,\\n        Account memory account,\\n        bytes[] memory proof\\n    ) internal pure returns (bool) {\\n        uint256 key = uint256(\\n            keccak256(abi.encodePacked(account.accountAddress))\\n        );\\n\\n        bytes memory leaf = verifyLeaf(root, key, proof);\\n\\n        RLPReader.RLPItem[] memory decoded = leaf.toRlpItem().toList();\\n\\n        if (decoded.length != 4) revert InvalidAccount();\\n        if (decoded[0].toUint() != account.nonce) return false;\\n        if (decoded[1].toUint() != account.balance) return false;\\n        if (decoded[2].toUint() != uint256(account.storageRoot)) return false;\\n        if (decoded[3].toUint() != uint256(account.codeHash)) return false;\\n\\n        return true;\\n    }\\n\\n    function verifyStorageSlot(\\n        bytes32 root,\\n        StorageSlot memory slot,\\n        bytes[] memory proof\\n    ) internal pure returns (bool) {\\n        uint256 key = uint256(keccak256(abi.encode(slot.position)));\\n\\n        bytes memory leaf = verifyLeaf(root, key, proof);\\n\\n        return slot.value == leaf.toRlpItem().toUint();\\n    }\\n\\n    function verifyLeaf(\\n        bytes32 root,\\n        uint256 key,\\n        bytes[] memory proof\\n    ) internal pure returns (bytes memory result) {\\n        uint256 nibble = 0;\\n        RLPReader.RLPItem[] memory node;\\n        for (uint256 index = 0; index < proof.length; ++index) {\\n            if (keccak256(proof[index]) != root) revert InvalidProof(index);\\n\\n            node = proof[index].toRlpItem().toList();\\n            if (node.length == 17) {\\n                uint256 keyNibble = (key >> (252 - (nibble++ * 4))) & 0xf;\\n                root = bytes32(node[keyNibble].toUintStrict());\\n            } else if (node.length == 2) {\\n                bytes memory prefix = node[0].toBytes();\\n\\n                bool isExtension;\\n                (isExtension, nibble) = checkEncodedPath(\\n                    prefix,\\n                    key,\\n                    nibble,\\n                    index\\n                );\\n\\n                if (isExtension) {\\n                    root = bytes32(node[1].toUintStrict());\\n                } else {\\n                    break;\\n                }\\n            }\\n        }\\n\\n        if (nibble != 64) revert InvalidProof(proof.length - 1);\\n        return node[1].toBytes();\\n    }\\n\\n    /*\\n        hex char    bits    |    node type partial     path length\\n      ----------------------------------------------------------\\n        0        0000    |       extension              even\\n        1        0001    |       extension              odd\\n        3        0011    |   terminating (leaf)         odd\\n        2        0010    |   terminating (leaf)         even\\n  */\\n    function checkEncodedPath(\\n        bytes memory prefix,\\n        uint256 key,\\n        uint256 nibble,\\n        uint256 index\\n    ) private pure returns (bool, uint256) {\\n        uint8 nodeType = uint8(prefix[0] >> 4);\\n\\n        // odd cases\\n        if (nodeType & 0x1 != 0) {\\n            uint256 keyNibble = (key >> (252 - (nibble++ * 4))) & 0xf;\\n\\n            uint256 prefixNibble = uint8(prefix[0]) & 0xf;\\n            if (prefixNibble != keyNibble) revert InvalidProof(index);\\n        }\\n\\n        uint256 prefixLen = prefix.length;\\n\\n        assert(nibble % 2 == 0);\\n        for (uint256 i = 1; i < prefixLen; ++i) {\\n            uint256 prefixByte = uint8(prefix[i]);\\n            uint256 keyByte = (key >> (248 - (nibble * 4))) & 0xff;\\n\\n            if (prefixByte != keyByte) revert InvalidProof(index);\\n\\n            nibble += 2;\\n        }\\n\\n        // return true if node is an extension and we should continue traveling the trie\\n        // also returns the new nibble count, for bookkeeping\\n        return (nodeType & 0x2 == 0, nibble);\\n    }\\n}\\n\",\"keccak256\":\"0x246ed903d03cf027dd0982679df57d6097e56f21bda7374bdcdc0df6e383ab5c\",\"license\":\"MIT\"},\"contracts/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.5.10 <0.9.0;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item; // Item that's being iterated over.\\n        uint256 nextPtr; // Position of the next item in the list.\\n    }\\n\\n    /*\\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n     * @param self The iterator.\\n     * @return The next element in the iteration.\\n     */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint256 ptr = self.nextPtr;\\n        uint256 itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns true if the iteration has more elements.\\n     * @param self The iterator.\\n     * @return true if the iteration has more elements.\\n     */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(\\n        bytes memory item\\n    ) internal pure returns (RLPItem memory) {\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @dev Create an iterator. Reverts if item is not a list.\\n     * @param self The RLP item.\\n     * @return An 'Iterator' over the item.\\n     */\\n    function iterator(\\n        RLPItem memory self\\n    ) internal pure returns (Iterator memory) {\\n        require(isList(self));\\n\\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\\n        return item.len;\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     * @return (memPtr, len) pair: location of the item's payload in memory.\\n     */\\n    function payloadLocation(\\n        RLPItem memory item\\n    ) internal pure returns (uint256, uint256) {\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 memPtr = item.memPtr + offset;\\n        uint256 len = item.len - offset; // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\\n        (, uint256 len) = payloadLocation(item);\\n        return len;\\n    }\\n\\n    /*\\n     * @param the RLP item containing the encoded list.\\n     */\\n    function toList(\\n        RLPItem memory item\\n    ) internal pure returns (RLPItem[] memory) {\\n        require(isList(item));\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(\\n        RLPItem memory item\\n    ) internal pure returns (bytes32) {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(\\n        RLPItem memory item\\n    ) internal pure returns (bytes32) {\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(\\n        RLPItem memory item\\n    ) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte except \\\"0x80\\\" is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint256 result;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        // SEE Github Issue #5.\\n        // Summary: Most commonly used RLP libraries (i.e Geth) will encode\\n        // \\\"0\\\" as \\\"0x80\\\" instead of as \\\"0\\\". We handle this edge case explicitly\\n        // here.\\n        if (result == 0 || result == STRING_SHORT_START) {\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n\\n        uint256 result;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shift to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(memPtr, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint256) {\\n        if (item.len == 0) return 0;\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) {\\n            itemLen = 1;\\n        } else if (byte0 < STRING_LONG_START) {\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n        } else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) {\\n            return 0;\\n        } else if (\\n            byte0 < STRING_LONG_START ||\\n            (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)\\n        ) {\\n            return 1;\\n        } else if (byte0 < LIST_SHORT_START) {\\n            // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        } else {\\n            return byte0 - (LIST_LONG_START - 1) + 1;\\n        }\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(uint256 src, uint256 dest, uint256 len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len > 0) {\\n            // left over bytes. Mask is used to remove unwanted bytes from the word\\n            uint256 mask = 256 ** (WORD_SIZE - len) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask)) // zero out src\\n                let destpart := and(mload(dest), mask) // retrieve the bytes\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf892ca378e7cf0dc378171d036221c073922d95c6ff7f38e0d2bd7526e1b7d40\",\"license\":\"Apache-2.0\"},\"contracts/StorageVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {MPT} from \\\"./MPT.sol\\\";\\n\\nabstract contract StorageVerifier {\\n    error InvalidStateProof();\\n    error InvalidStorageProof();\\n\\n    error Debug(bytes32 p);\\n\\n    function _verifyStorage(\\n        bytes32 root,\\n        MPT.Account memory contractAccount,\\n        MPT.StorageSlot memory contractSlot,\\n        bytes[] memory stateProof,\\n        bytes[] memory storageProof\\n    ) internal {\\n        if (!MPT.verifyAccount(root, contractAccount, stateProof)) {\\n            revert InvalidStateProof();\\n        }\\n        if (\\n            !MPT.verifyStorageSlot(\\n                contractAccount.storageRoot,\\n                contractSlot,\\n                storageProof\\n            )\\n        ) {\\n            revert InvalidStorageProof();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xac37c55348da8c80311c1c6a62118cdddaa86e2c364294d80bc2300020511fe3\",\"license\":\"MIT\"},\"contracts/interfaces/IHashi.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.17;\\n\\nimport {IOracleAdapter} from \\\"./IOracleAdapter.sol\\\";\\n\\ninterface IHashi {\\n    function getHash(\\n        uint256 domain,\\n        uint256 id,\\n        IOracleAdapter[] memory oracleAdapters\\n    ) external view returns (bytes32 hash);\\n}\\n\",\"keccak256\":\"0x05a9433fa1d26e18a5b47f0fe296bbe0ff0b9429843da1691691e83e36310ec3\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IOracleAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.17;\\n\\ninterface IOracleAdapter {\\n    event HashStored(uint256 indexed id, bytes32 indexed hashes);\\n\\n    error InvalidBlockHeaderLength(uint256 length);\\n    error InvalidBlockHeaderRLP();\\n    error ConflictingBlockHeader(\\n        uint256 blockNumber,\\n        bytes32 reportedBlockHash,\\n        bytes32 storedBlockHash\\n    );\\n\\n    /// @dev Returns the hash for a given ID, as reported by the oracle.\\n    /// @param domain Identifier for the domain to query.\\n    /// @param id Identifier for the ID to query.\\n    /// @return hash Bytes32 hash reported by the oracle for the given ID on the given domain.\\n    /// @notice MUST return bytes32(0) if the oracle has not yet reported a hash for the given ID.\\n    function getHashFromOracle(\\n        uint256 domain,\\n        uint256 id\\n    ) external view returns (bytes32 hash);\\n}\\n\",\"keccak256\":\"0x0ec391f6a6d6846efc8277b5486da60bda6b74390ca01cd960c02769c0899c4b\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60c06040527f1e34f1137efe68235a91b52a9afb6e30e08dcf86e25376a8867ebbebd463ca9960001b6080908152503480156200003b57600080fd5b506040516200227438038062002274833981810160405281019062000061919062000106565b8073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250505062000138565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000ce82620000a1565b9050919050565b620000e081620000c1565b8114620000ec57600080fd5b50565b6000815190506200010081620000d5565b92915050565b6000602082840312156200011f576200011e6200009c565b5b60006200012f84828501620000ef565b91505092915050565b60805160a05161210c62000168600039600050506000818160a0015281816102630152610289015261210c6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632f0418f514610046578063654f71a6146100625780638c6c86d114610080575b600080fd5b610060600480360381019061005b9190611755565b61009e565b005b61006a610261565b604051610077919061185a565b60405180910390f35b610088610285565b604051610095919061185a565b60405180910390f35b7f00000000000000000000000000000000000000000000000000000000000000008714610100576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f7906118d2565b60405180910390fd5b600061012a866040516020016101169190611901565b6040516020818303038152906040526102ad565b9050600061014186836102e890919063ffffffff16565b905060007fff814b221f1c0d28fe442a044153519cd208eac664cac2f31a95bee9bd040e4060001b9050600073ef1a89cbfabe59397ffda11fc5df293e9bc5db90905060006040518060a001604052808373ffffffffffffffffffffffffffffffffffffffff16815260200160018152602001600081526020018981526020017ffc1ea81db44e2de921b958dc92da921a18968ff3f3465bd475fb86dd1af0398660001b8152509050600060405180604001604052808d606760405160200161020b92919061197d565b6040516020818303038152906040528051906020012060001c81526020018673ffffffffffffffffffffffffffffffffffffffff1681525090506102528483838b8b61030f565b50505050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006102b9825161039c565b826040516020016102cb929190611aaa565b604051602081830303815290604052805190602001209050919050565b60008060006102f7858561046a565b91509150610304816104bb565b819250505092915050565b61031a858584610621565b610350576040517fd5d82fd400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61035f846060015184836107b0565b610395576040517f335a0b1300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b6060600060016103ab84610814565b01905060008167ffffffffffffffff8111156103ca576103c9611544565b5b6040519080825280601f01601f1916602001820160405280156103fc5781602001600182028036833780820191505090505b509050600082602001820190505b60011561045f578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161045357610452611ad9565b5b0494506000850361040a575b819350505050919050565b60008060418351036104ab5760008060006020860151925060408601519150606086015160001a905061049f87828585610967565b945094505050506104b4565b60006002915091505b9250929050565b600060048111156104cf576104ce611b08565b5b8160048111156104e2576104e1611b08565b5b031561061e57600160048111156104fc576104fb611b08565b5b81600481111561050f5761050e611b08565b5b0361054f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054690611b83565b60405180910390fd5b6002600481111561056357610562611b08565b5b81600481111561057657610575611b08565b5b036105b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ad90611bef565b60405180910390fd5b600360048111156105ca576105c9611b08565b5b8160048111156105dd576105dc611b08565b5b0361061d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061490611c81565b60405180910390fd5b5b50565b60008083600001516040516020016106399190611ce9565b6040516020818303038152906040528051906020012060001c90506000610661868386610a49565b9050600061067661067183610c6c565b610c9a565b905060048151146106b3576040517f6d187b2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85602001516106dc826000815181106106cf576106ce611d04565b5b6020026020010151610daf565b146106ed57600093505050506107a9565b85604001516107168260018151811061070957610708611d04565b5b6020026020010151610daf565b1461072757600093505050506107a9565b856060015160001c6107538260028151811061074657610745611d04565b5b6020026020010151610daf565b1461076457600093505050506107a9565b856080015160001c6107908260038151811061078357610782611d04565b5b6020026020010151610daf565b146107a157600093505050506107a9565b600193505050505b9392505050565b60008083600001516040516020016107c89190611d33565b6040516020818303038152906040528051906020012060001c905060006107f0868386610a49565b90506108036107fe82610c6c565b610daf565b856020015114925050509392505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610872577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161086857610867611ad9565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106108af576d04ee2d6d415b85acef810000000083816108a5576108a4611ad9565b5b0492506020810190505b662386f26fc1000083106108de57662386f26fc1000083816108d4576108d3611ad9565b5b0492506010810190505b6305f5e1008310610907576305f5e10083816108fd576108fc611ad9565b5b0492506008810190505b612710831061092c57612710838161092257610921611ad9565b5b0492506004810190505b6064831061094f576064838161094557610944611ad9565b5b0492506002810190505b600a831061095e576001810190505b80915050919050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156109a2576000600391509150610a40565b6000600187878787604051600081526020016040526040516109c79493929190611d5d565b6020604051602081039080840390855afa1580156109e9573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a3757600060019250925050610a40565b80600092509250505b94509492505050565b60606000606060005b8451811015610bea5786858281518110610a6f57610a6e611d04565b5b60200260200101518051906020012014610ac057806040517f5e3fa051000000000000000000000000000000000000000000000000000000008152600401610ab79190611d33565b60405180910390fd5b610aeb610ae6868381518110610ad957610ad8611d04565b5b6020026020010151610c6c565b610c9a565b91506011825103610b53576000600f60048580610b0790611dd1565b9650610b139190611e19565b60fc610b1f9190611e5b565b88901c169050610b48838281518110610b3b57610b3a611d04565b5b6020026020010151610e09565b60001b975050610bd9565b6002825103610bd8576000610b8283600081518110610b7557610b74611d04565b5b6020026020010151610e40565b90506000610b9282898786610ed3565b80965081925050508015610bce57610bc484600181518110610bb757610bb6611d04565b5b6020026020010151610e09565b60001b9850610bd5565b5050610bea565b50505b5b80610be390611dd1565b9050610a52565b5060408214610c3d5760018451610c019190611e5b565b6040517f5e3fa051000000000000000000000000000000000000000000000000000000008152600401610c349190611d33565b60405180910390fd5b610c6181600181518110610c5457610c53611d04565b5b6020026020010151610e40565b925050509392505050565b610c74611431565b600060208301905060405180604001604052808451815260200182815250915050919050565b6060610ca5826110d0565b610cae57600080fd5b6000610cb98361111d565b905060008167ffffffffffffffff811115610cd757610cd6611544565b5b604051908082528060200260200182016040528015610d1057816020015b610cfd611431565b815260200190600190039081610cf55790505b5090506000610d2285602001516111aa565b8560200151610d319190611e8f565b9050600080600090505b84811015610da257610d4c83611269565b9150604051806040016040528083815260200184815250848281518110610d7657610d75611d04565b5b60200260200101819052508183610d8d9190611e8f565b92508080610d9a90611dd1565b915050610d3b565b5082945050505050919050565b6000808260000151118015610dc957506021826000015111155b610dd257600080fd5b600080610dde84611345565b915091506000825190506020821015610dfe57816020036101000a810490505b809350505050919050565b60006021826000015114610e1c57600080fd5b60008060018460200151610e309190611e8f565b9050805191508192505050919050565b60606000826000015111610e5357600080fd5b600080610e5f84611345565b9150915060008167ffffffffffffffff811115610e7f57610e7e611544565b5b6040519080825280601f01601f191660200182016040528015610eb15781602001600182028036833780820191505090505b5090506000816020019050610ec784828561138f565b81945050505050919050565b6000806000600487600081518110610eee57610eed611d04565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c905060006001821660ff1614610fd2576000600f60048780610f4190611dd1565b9850610f4d9190611e19565b60fc610f599190611e5b565b88901c1690506000600f89600081518110610f7757610f76611d04565b5b602001015160f81c60f81b60f81c1660ff169050818114610fcf57856040517f5e3fa051000000000000000000000000000000000000000000000000000000008152600401610fc69190611d33565b60405180910390fd5b50505b6000875190506000600287610fe79190611ec3565b14610ff557610ff4611ef4565b5b6000600190505b818110156110b557600089828151811061101957611018611d04565b5b602001015160f81c60f81b60f81c60ff169050600060ff60048a61103d9190611e19565b60f86110499190611e5b565b8b901c16905080821461109357876040517f5e3fa05100000000000000000000000000000000000000000000000000000000815260040161108a9190611d33565b60405180910390fd5b6002896110a09190611e8f565b98505050806110ae90611dd1565b9050610ffc565b5060006002831660ff16148693509350505094509492505050565b6000808260000151036110e65760009050611118565b60008083602001519050805160001a915060c060ff168260ff16101561111157600092505050611118565b6001925050505b919050565b60008082600001510361113357600090506111a5565b60008061114384602001516111aa565b84602001516111529190611e8f565b905060008460000151856020015161116a9190611e8f565b90505b8082101561119e5761117e82611269565b826111899190611e8f565b9150828061119690611dd1565b93505061116d565b8293505050505b919050565b600080825160001a9050608060ff168110156111ca576000915050611264565b60b860ff168110806111ef575060c060ff1681101580156111ee575060f860ff1681105b5b156111fe576001915050611264565b60c060ff168110156112395760018060b86112199190611f23565b60ff16826112279190611e5b565b6112319190611e8f565b915050611264565b60018060f86112489190611f23565b60ff16826112569190611e5b565b6112609190611e8f565b9150505b919050565b6000806000835160001a9050608060ff1681101561128a576001915061133b565b60b860ff168110156112b9576001608060ff16826112a89190611e5b565b6112b29190611e8f565b915061133a565b60c060ff168110156112e95760b78103600185019450806020036101000a85510460018201810193505050611339565b60f860ff1681101561131857600160c060ff16826113079190611e5b565b6113119190611e8f565b9150611338565b60f78103600185019450806020036101000a855104600182018101935050505b5b5b5b8192505050919050565b600080600061135784602001516111aa565b9050600081856020015161136b9190611e8f565b9050600082866000015161137f9190611e5b565b9050818194509450505050915091565b600081031561142c575b602060ff1681106113e35782518252602060ff16836113b89190611e8f565b9250602060ff16826113ca9190611e8f565b9150602060ff16816113dc9190611e5b565b9050611399565b600081111561142b576000600182602060ff166114009190611e5b565b61010061140d919061208b565b6114179190611e5b565b905080198451168184511681811785525050505b5b505050565b604051806040016040528060008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6114728161145f565b811461147d57600080fd5b50565b60008135905061148f81611469565b92915050565b6000819050919050565b6114a881611495565b81146114b357600080fd5b50565b6000813590506114c58161149f565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006114f6826114cb565b9050919050565b611506816114eb565b811461151157600080fd5b50565b600081359050611523816114fd565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61157c82611533565b810181811067ffffffffffffffff8211171561159b5761159a611544565b5b80604052505050565b60006115ae61144b565b90506115ba8282611573565b919050565b600067ffffffffffffffff8211156115da576115d9611544565b5b6115e382611533565b9050602081019050919050565b82818337600083830152505050565b600061161261160d846115bf565b6115a4565b90508281526020810184848401111561162e5761162d61152e565b5b6116398482856115f0565b509392505050565b600082601f83011261165657611655611529565b5b81356116668482602086016115ff565b91505092915050565b600067ffffffffffffffff82111561168a57611689611544565b5b602082029050602081019050919050565b600080fd5b60006116b36116ae8461166f565b6115a4565b905080838252602082019050602084028301858111156116d6576116d561169b565b5b835b8181101561171d57803567ffffffffffffffff8111156116fb576116fa611529565b5b8086016117088982611641565b855260208501945050506020810190506116d8565b5050509392505050565b600082601f83011261173c5761173b611529565b5b813561174c8482602086016116a0565b91505092915050565b600080600080600080600060e0888a03121561177457611773611455565b5b60006117828a828b01611480565b97505060206117938a828b016114b6565b96505060406117a48a828b01611514565b955050606088013567ffffffffffffffff8111156117c5576117c461145a565b5b6117d18a828b01611641565b94505060806117e28a828b01611480565b93505060a088013567ffffffffffffffff8111156118035761180261145a565b5b61180f8a828b01611727565b92505060c088013567ffffffffffffffff8111156118305761182f61145a565b5b61183c8a828b01611727565b91505092959891949750929550565b6118548161145f565b82525050565b600060208201905061186f600083018461184b565b92915050565b600082825260208201905092915050565b7f626c6f636b68656164657220697320696e636f72726563740000000000000000600082015250565b60006118bc601883611875565b91506118c782611886565b602082019050919050565b600060208201905081810360008301526118eb816118af565b9050919050565b6118fb816114eb565b82525050565b600060208201905061191660008301846118f2565b92915050565b61192581611495565b82525050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b600061196761196261195d8461192b565b611942565b611935565b9050919050565b6119778161194c565b82525050565b6000604082019050611992600083018561191c565b61199f602083018461196e565b9392505050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a000000000000600082015250565b60006119e7601a836119a6565b91506119f2826119b1565b601a82019050919050565b600081519050919050565b60005b83811015611a26578082015181840152602081019050611a0b565b60008484015250505050565b6000611a3d826119fd565b611a4781856119a6565b9350611a57818560208601611a08565b80840191505092915050565b600081519050919050565b600081905092915050565b6000611a8482611a63565b611a8e8185611a6e565b9350611a9e818560208601611a08565b80840191505092915050565b6000611ab5826119da565b9150611ac18285611a32565b9150611acd8284611a79565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000611b6d601883611875565b9150611b7882611b37565b602082019050919050565b60006020820190508181036000830152611b9c81611b60565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000611bd9601f83611875565b9150611be482611ba3565b602082019050919050565b60006020820190508181036000830152611c0881611bcc565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000611c6b602283611875565b9150611c7682611c0f565b604082019050919050565b60006020820190508181036000830152611c9a81611c5e565b9050919050565b60008160601b9050919050565b6000611cb982611ca1565b9050919050565b6000611ccb82611cae565b9050919050565b611ce3611cde826114eb565b611cc0565b82525050565b6000611cf58284611cd2565b60148201915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082019050611d48600083018461191c565b92915050565b611d5781611935565b82525050565b6000608082019050611d72600083018761184b565b611d7f6020830186611d4e565b611d8c604083018561184b565b611d99606083018461184b565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611ddc82611495565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611e0e57611e0d611da2565b5b600182019050919050565b6000611e2482611495565b9150611e2f83611495565b9250828202611e3d81611495565b91508282048414831517611e5457611e53611da2565b5b5092915050565b6000611e6682611495565b9150611e7183611495565b9250828203905081811115611e8957611e88611da2565b5b92915050565b6000611e9a82611495565b9150611ea583611495565b9250828201905080821115611ebd57611ebc611da2565b5b92915050565b6000611ece82611495565b9150611ed983611495565b925082611ee957611ee8611ad9565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6000611f2e82611935565b9150611f3983611935565b9250828203905060ff811115611f5257611f51611da2565b5b92915050565b60008160011c9050919050565b6000808291508390505b6001851115611faf57808604811115611f8b57611f8a611da2565b5b6001851615611f9a5780820291505b8081029050611fa885611f58565b9450611f6f565b94509492505050565b600082611fc85760019050612084565b81611fd65760009050612084565b8160018114611fec5760028114611ff657612025565b6001915050612084565b60ff84111561200857612007611da2565b5b8360020a91508482111561201f5761201e611da2565b5b50612084565b5060208310610133831016604e8410600b841016171561205a5782820a90508381111561205557612054611da2565b5b612084565b6120678484846001611f65565b9250905081840481111561207e5761207d611da2565b5b81810290505b9392505050565b600061209682611495565b91506120a183611495565b92506120ce7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611fb8565b90509291505056fea264697066735822122010e684bd5d962cb8d2830988688f0e2731232e85d845ed91fa39d007d22e28c264736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80632f0418f514610046578063654f71a6146100625780638c6c86d114610080575b600080fd5b610060600480360381019061005b9190611755565b61009e565b005b61006a610261565b604051610077919061185a565b60405180910390f35b610088610285565b604051610095919061185a565b60405180910390f35b7f00000000000000000000000000000000000000000000000000000000000000008714610100576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f7906118d2565b60405180910390fd5b600061012a866040516020016101169190611901565b6040516020818303038152906040526102ad565b9050600061014186836102e890919063ffffffff16565b905060007fff814b221f1c0d28fe442a044153519cd208eac664cac2f31a95bee9bd040e4060001b9050600073ef1a89cbfabe59397ffda11fc5df293e9bc5db90905060006040518060a001604052808373ffffffffffffffffffffffffffffffffffffffff16815260200160018152602001600081526020018981526020017ffc1ea81db44e2de921b958dc92da921a18968ff3f3465bd475fb86dd1af0398660001b8152509050600060405180604001604052808d606760405160200161020b92919061197d565b6040516020818303038152906040528051906020012060001c81526020018673ffffffffffffffffffffffffffffffffffffffff1681525090506102528483838b8b61030f565b50505050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006102b9825161039c565b826040516020016102cb929190611aaa565b604051602081830303815290604052805190602001209050919050565b60008060006102f7858561046a565b91509150610304816104bb565b819250505092915050565b61031a858584610621565b610350576040517fd5d82fd400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61035f846060015184836107b0565b610395576040517f335a0b1300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b6060600060016103ab84610814565b01905060008167ffffffffffffffff8111156103ca576103c9611544565b5b6040519080825280601f01601f1916602001820160405280156103fc5781602001600182028036833780820191505090505b509050600082602001820190505b60011561045f578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161045357610452611ad9565b5b0494506000850361040a575b819350505050919050565b60008060418351036104ab5760008060006020860151925060408601519150606086015160001a905061049f87828585610967565b945094505050506104b4565b60006002915091505b9250929050565b600060048111156104cf576104ce611b08565b5b8160048111156104e2576104e1611b08565b5b031561061e57600160048111156104fc576104fb611b08565b5b81600481111561050f5761050e611b08565b5b0361054f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054690611b83565b60405180910390fd5b6002600481111561056357610562611b08565b5b81600481111561057657610575611b08565b5b036105b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ad90611bef565b60405180910390fd5b600360048111156105ca576105c9611b08565b5b8160048111156105dd576105dc611b08565b5b0361061d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061490611c81565b60405180910390fd5b5b50565b60008083600001516040516020016106399190611ce9565b6040516020818303038152906040528051906020012060001c90506000610661868386610a49565b9050600061067661067183610c6c565b610c9a565b905060048151146106b3576040517f6d187b2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85602001516106dc826000815181106106cf576106ce611d04565b5b6020026020010151610daf565b146106ed57600093505050506107a9565b85604001516107168260018151811061070957610708611d04565b5b6020026020010151610daf565b1461072757600093505050506107a9565b856060015160001c6107538260028151811061074657610745611d04565b5b6020026020010151610daf565b1461076457600093505050506107a9565b856080015160001c6107908260038151811061078357610782611d04565b5b6020026020010151610daf565b146107a157600093505050506107a9565b600193505050505b9392505050565b60008083600001516040516020016107c89190611d33565b6040516020818303038152906040528051906020012060001c905060006107f0868386610a49565b90506108036107fe82610c6c565b610daf565b856020015114925050509392505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610872577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161086857610867611ad9565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106108af576d04ee2d6d415b85acef810000000083816108a5576108a4611ad9565b5b0492506020810190505b662386f26fc1000083106108de57662386f26fc1000083816108d4576108d3611ad9565b5b0492506010810190505b6305f5e1008310610907576305f5e10083816108fd576108fc611ad9565b5b0492506008810190505b612710831061092c57612710838161092257610921611ad9565b5b0492506004810190505b6064831061094f576064838161094557610944611ad9565b5b0492506002810190505b600a831061095e576001810190505b80915050919050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156109a2576000600391509150610a40565b6000600187878787604051600081526020016040526040516109c79493929190611d5d565b6020604051602081039080840390855afa1580156109e9573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a3757600060019250925050610a40565b80600092509250505b94509492505050565b60606000606060005b8451811015610bea5786858281518110610a6f57610a6e611d04565b5b60200260200101518051906020012014610ac057806040517f5e3fa051000000000000000000000000000000000000000000000000000000008152600401610ab79190611d33565b60405180910390fd5b610aeb610ae6868381518110610ad957610ad8611d04565b5b6020026020010151610c6c565b610c9a565b91506011825103610b53576000600f60048580610b0790611dd1565b9650610b139190611e19565b60fc610b1f9190611e5b565b88901c169050610b48838281518110610b3b57610b3a611d04565b5b6020026020010151610e09565b60001b975050610bd9565b6002825103610bd8576000610b8283600081518110610b7557610b74611d04565b5b6020026020010151610e40565b90506000610b9282898786610ed3565b80965081925050508015610bce57610bc484600181518110610bb757610bb6611d04565b5b6020026020010151610e09565b60001b9850610bd5565b5050610bea565b50505b5b80610be390611dd1565b9050610a52565b5060408214610c3d5760018451610c019190611e5b565b6040517f5e3fa051000000000000000000000000000000000000000000000000000000008152600401610c349190611d33565b60405180910390fd5b610c6181600181518110610c5457610c53611d04565b5b6020026020010151610e40565b925050509392505050565b610c74611431565b600060208301905060405180604001604052808451815260200182815250915050919050565b6060610ca5826110d0565b610cae57600080fd5b6000610cb98361111d565b905060008167ffffffffffffffff811115610cd757610cd6611544565b5b604051908082528060200260200182016040528015610d1057816020015b610cfd611431565b815260200190600190039081610cf55790505b5090506000610d2285602001516111aa565b8560200151610d319190611e8f565b9050600080600090505b84811015610da257610d4c83611269565b9150604051806040016040528083815260200184815250848281518110610d7657610d75611d04565b5b60200260200101819052508183610d8d9190611e8f565b92508080610d9a90611dd1565b915050610d3b565b5082945050505050919050565b6000808260000151118015610dc957506021826000015111155b610dd257600080fd5b600080610dde84611345565b915091506000825190506020821015610dfe57816020036101000a810490505b809350505050919050565b60006021826000015114610e1c57600080fd5b60008060018460200151610e309190611e8f565b9050805191508192505050919050565b60606000826000015111610e5357600080fd5b600080610e5f84611345565b9150915060008167ffffffffffffffff811115610e7f57610e7e611544565b5b6040519080825280601f01601f191660200182016040528015610eb15781602001600182028036833780820191505090505b5090506000816020019050610ec784828561138f565b81945050505050919050565b6000806000600487600081518110610eee57610eed611d04565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c905060006001821660ff1614610fd2576000600f60048780610f4190611dd1565b9850610f4d9190611e19565b60fc610f599190611e5b565b88901c1690506000600f89600081518110610f7757610f76611d04565b5b602001015160f81c60f81b60f81c1660ff169050818114610fcf57856040517f5e3fa051000000000000000000000000000000000000000000000000000000008152600401610fc69190611d33565b60405180910390fd5b50505b6000875190506000600287610fe79190611ec3565b14610ff557610ff4611ef4565b5b6000600190505b818110156110b557600089828151811061101957611018611d04565b5b602001015160f81c60f81b60f81c60ff169050600060ff60048a61103d9190611e19565b60f86110499190611e5b565b8b901c16905080821461109357876040517f5e3fa05100000000000000000000000000000000000000000000000000000000815260040161108a9190611d33565b60405180910390fd5b6002896110a09190611e8f565b98505050806110ae90611dd1565b9050610ffc565b5060006002831660ff16148693509350505094509492505050565b6000808260000151036110e65760009050611118565b60008083602001519050805160001a915060c060ff168260ff16101561111157600092505050611118565b6001925050505b919050565b60008082600001510361113357600090506111a5565b60008061114384602001516111aa565b84602001516111529190611e8f565b905060008460000151856020015161116a9190611e8f565b90505b8082101561119e5761117e82611269565b826111899190611e8f565b9150828061119690611dd1565b93505061116d565b8293505050505b919050565b600080825160001a9050608060ff168110156111ca576000915050611264565b60b860ff168110806111ef575060c060ff1681101580156111ee575060f860ff1681105b5b156111fe576001915050611264565b60c060ff168110156112395760018060b86112199190611f23565b60ff16826112279190611e5b565b6112319190611e8f565b915050611264565b60018060f86112489190611f23565b60ff16826112569190611e5b565b6112609190611e8f565b9150505b919050565b6000806000835160001a9050608060ff1681101561128a576001915061133b565b60b860ff168110156112b9576001608060ff16826112a89190611e5b565b6112b29190611e8f565b915061133a565b60c060ff168110156112e95760b78103600185019450806020036101000a85510460018201810193505050611339565b60f860ff1681101561131857600160c060ff16826113079190611e5b565b6113119190611e8f565b9150611338565b60f78103600185019450806020036101000a855104600182018101935050505b5b5b5b8192505050919050565b600080600061135784602001516111aa565b9050600081856020015161136b9190611e8f565b9050600082866000015161137f9190611e5b565b9050818194509450505050915091565b600081031561142c575b602060ff1681106113e35782518252602060ff16836113b89190611e8f565b9250602060ff16826113ca9190611e8f565b9150602060ff16816113dc9190611e5b565b9050611399565b600081111561142b576000600182602060ff166114009190611e5b565b61010061140d919061208b565b6114179190611e5b565b905080198451168184511681811785525050505b5b505050565b604051806040016040528060008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6114728161145f565b811461147d57600080fd5b50565b60008135905061148f81611469565b92915050565b6000819050919050565b6114a881611495565b81146114b357600080fd5b50565b6000813590506114c58161149f565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006114f6826114cb565b9050919050565b611506816114eb565b811461151157600080fd5b50565b600081359050611523816114fd565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61157c82611533565b810181811067ffffffffffffffff8211171561159b5761159a611544565b5b80604052505050565b60006115ae61144b565b90506115ba8282611573565b919050565b600067ffffffffffffffff8211156115da576115d9611544565b5b6115e382611533565b9050602081019050919050565b82818337600083830152505050565b600061161261160d846115bf565b6115a4565b90508281526020810184848401111561162e5761162d61152e565b5b6116398482856115f0565b509392505050565b600082601f83011261165657611655611529565b5b81356116668482602086016115ff565b91505092915050565b600067ffffffffffffffff82111561168a57611689611544565b5b602082029050602081019050919050565b600080fd5b60006116b36116ae8461166f565b6115a4565b905080838252602082019050602084028301858111156116d6576116d561169b565b5b835b8181101561171d57803567ffffffffffffffff8111156116fb576116fa611529565b5b8086016117088982611641565b855260208501945050506020810190506116d8565b5050509392505050565b600082601f83011261173c5761173b611529565b5b813561174c8482602086016116a0565b91505092915050565b600080600080600080600060e0888a03121561177457611773611455565b5b60006117828a828b01611480565b97505060206117938a828b016114b6565b96505060406117a48a828b01611514565b955050606088013567ffffffffffffffff8111156117c5576117c461145a565b5b6117d18a828b01611641565b94505060806117e28a828b01611480565b93505060a088013567ffffffffffffffff8111156118035761180261145a565b5b61180f8a828b01611727565b92505060c088013567ffffffffffffffff8111156118305761182f61145a565b5b61183c8a828b01611727565b91505092959891949750929550565b6118548161145f565b82525050565b600060208201905061186f600083018461184b565b92915050565b600082825260208201905092915050565b7f626c6f636b68656164657220697320696e636f72726563740000000000000000600082015250565b60006118bc601883611875565b91506118c782611886565b602082019050919050565b600060208201905081810360008301526118eb816118af565b9050919050565b6118fb816114eb565b82525050565b600060208201905061191660008301846118f2565b92915050565b61192581611495565b82525050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b600061196761196261195d8461192b565b611942565b611935565b9050919050565b6119778161194c565b82525050565b6000604082019050611992600083018561191c565b61199f602083018461196e565b9392505050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a000000000000600082015250565b60006119e7601a836119a6565b91506119f2826119b1565b601a82019050919050565b600081519050919050565b60005b83811015611a26578082015181840152602081019050611a0b565b60008484015250505050565b6000611a3d826119fd565b611a4781856119a6565b9350611a57818560208601611a08565b80840191505092915050565b600081519050919050565b600081905092915050565b6000611a8482611a63565b611a8e8185611a6e565b9350611a9e818560208601611a08565b80840191505092915050565b6000611ab5826119da565b9150611ac18285611a32565b9150611acd8284611a79565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000611b6d601883611875565b9150611b7882611b37565b602082019050919050565b60006020820190508181036000830152611b9c81611b60565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000611bd9601f83611875565b9150611be482611ba3565b602082019050919050565b60006020820190508181036000830152611c0881611bcc565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000611c6b602283611875565b9150611c7682611c0f565b604082019050919050565b60006020820190508181036000830152611c9a81611c5e565b9050919050565b60008160601b9050919050565b6000611cb982611ca1565b9050919050565b6000611ccb82611cae565b9050919050565b611ce3611cde826114eb565b611cc0565b82525050565b6000611cf58284611cd2565b60148201915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082019050611d48600083018461191c565b92915050565b611d5781611935565b82525050565b6000608082019050611d72600083018761184b565b611d7f6020830186611d4e565b611d8c604083018561184b565b611d99606083018461184b565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611ddc82611495565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611e0e57611e0d611da2565b5b600182019050919050565b6000611e2482611495565b9150611e2f83611495565b9250828202611e3d81611495565b91508282048414831517611e5457611e53611da2565b5b5092915050565b6000611e6682611495565b9150611e7183611495565b9250828203905081811115611e8957611e88611da2565b5b92915050565b6000611e9a82611495565b9150611ea583611495565b9250828201905080821115611ebd57611ebc611da2565b5b92915050565b6000611ece82611495565b9150611ed983611495565b925082611ee957611ee8611ad9565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6000611f2e82611935565b9150611f3983611935565b9250828203905060ff811115611f5257611f51611da2565b5b92915050565b60008160011c9050919050565b6000808291508390505b6001851115611faf57808604811115611f8b57611f8a611da2565b5b6001851615611f9a5780820291505b8081029050611fa885611f58565b9450611f6f565b94509492505050565b600082611fc85760019050612084565b81611fd65760009050612084565b8160018114611fec5760028114611ff657612025565b6001915050612084565b60ff84111561200857612007611da2565b5b8360020a91508482111561201f5761201e611da2565b5b50612084565b5060208310610133831016604e8410600b841016171561205a5782820a90508381111561205557612054611da2565b5b612084565b6120678484846001611f65565b9250905081840481111561207e5761207d611da2565b5b81810290505b9392505050565b600061209682611495565b91506120a183611495565b92506120ce7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611fb8565b90509291505056fea264697066735822122010e684bd5d962cb8d2830988688f0e2731232e85d845ed91fa39d007d22e28c264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}